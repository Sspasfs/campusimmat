<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_brick_1_1_math_1_1_big_integer" xml:lang="fr">
<title>Référence de la classe BigInteger</title>
<indexterm><primary>BigInteger</primary></indexterm>
Graphe d&apos;héritage de BigInteger:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Graphe de collaboration de BigInteger:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Fonctions membres publiques    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ac468fb693b5590834cd4b51f2d3e2451">plus</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a6dce32ad93c74e03ef90b3323e4973b0">minus</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a1c315435ff00063776b1329c502bd047">multipliedBy</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a947e7707b48cb05142ed10a3a09cac57">dividedBy</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>, int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">roundingMode</link>=<link linkend="_class_brick_1_1_math_1_1_rounding_mode_1a91be30d2d5343f30d7d280e5729c240b">RoundingMode::UNNECESSARY</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a48ba2199706f00142e6843db53b6301f">power</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">exponent</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a39c36e67443d8f11820995d101290ab5">quotient</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a75dfe9e6e90208994357a944dc914bc8">remainder</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a91a55c7de19230602b30de0d0665380d">quotientAndRemainder</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1af26c99fc8f0469394ee52fb29452ec4b">mod</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a85a7253fe275fbd5b12d41cd21f87289">modInverse</link> (<link linkend="_class_brick_1_1_math_1_1_big_integer">BigInteger</link> $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">m</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1aec4489694f844f91e170c008475f2784">modPow</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">exp</link>, $<link linkend="_class_brick_1_1_math_1_1_big_integer_1af26c99fc8f0469394ee52fb29452ec4b">mod</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1aa9d924e0b926ebf4be55a664c62e8003">gcd</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ae583a39c807ea86e2fbb0e9b6551a224">sqrt</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1af3271c1a26c6f5de343ba9197e8f7a2e">abs</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a921d7d43bb1c26467cec43b599585d61">negated</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a5c6eddfcb32543da7b3b18f14e92de02">and</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ae6b92de86e57ff3506edf29a70190d59">or</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1afc7809229fa54dc9d3662a7718cdb536">xor</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ae4b749acc120be8c42b44ac42a2fc102">not</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ac62ac67b36da688bd2ce51eb245f4ff5">shiftedLeft</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">distance</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1af71a2a311efb8c73ea38c5d27732c7b3">shiftedRight</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">distance</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a4da8d256be769f3cf0ce76f37257d6b8">getBitLength</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1aa11028695f143b243b1fcd4508c737c0">getLowestSetBit</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ade2ff05c9aadf502bc3972b26b3633d1">isEven</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ab358899040cc33e0a249d35839ab68d9">isOdd</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1addb472df5696f6ca7ce0ff6fca3974cd">testBit</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">n</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a49cef82ace4691910cc4465c47d1d9ec">compareTo</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a282c839169dc16e5d8bc47e8ac0f202b">getSign</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a7b4bac2966b6e735a4aaa27d8b6fe37d">toBigInteger</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1af8b74778aff7e428d45509bb86408596">toBigDecimal</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a14c7fa5ae37a286d34765aa00329dd7c">toBigRational</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1aee98ca780c25d3d40c4c2f02f238e25c">toScale</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">scale</link>, int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">roundingMode</link>=<link linkend="_class_brick_1_1_math_1_1_rounding_mode_1a91be30d2d5343f30d7d280e5729c240b">RoundingMode::UNNECESSARY</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1af925bcc620434a34f7ee4029b0700765">toInt</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a3774efe5a19fbbc82f1206fbd6f6dd4b">toFloat</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a34164fd96a3337ed92b51f6334e23e86">toBase</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">base</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a7edc81716282fcd92a258b5cde88baf6">toArbitraryBase</link> (string $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">alphabet</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1acb8915bbda0d45f9f3e07ef480915552">toBytes</link> (bool $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">signed</link>=true)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a7516ca30af0db3cdbf9a7739b48ce91d">__toString</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1ab1d6abfbdcd8c9dd63dfef565bd2cfcf">__serialize</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a2fe5966ad9b8e1d91a37d3e055ac4938">__unserialize</link> (array $data)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a4d9813fea8525b19a1d370eeb8fe41d6">serialize</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1aa95be162020f9db2ba2506f0edc7f7df">unserialize</link> ($value)</para>
</listitem>
        </itemizedlist>
</simplesect>
Fonctions membres publiques hérités de <link linkend="_class_brick_1_1_math_1_1_big_number">BigNumber</link>        <itemizedlist>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1a16cd8b81780f0455648c2fe7dea88024">isEqualTo</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1af51f1f4e067d1c220e829e82e8c07940">isLessThan</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1ab2562129575f203e762e8355852b9e9f">isLessThanOrEqualTo</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1a499873810a5651051cf1b832076ce138">isGreaterThan</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1a3c3170cb63239c1d9035106dcbf0b15b">isGreaterThanOrEqualTo</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">that</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1adbd8bd9ed173174eb4509a853096e34d">isZero</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1aaeeed6085a91098a429c53b3bc097587">isNegative</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1aba628edfe03498fd1bd0828d17b2613d">isNegativeOrZero</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1a017a082785367e089977172289090652">isPositive</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1a4f73a0b69e275b9db063d36214896c5b">isPositiveOrZero</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_number_1ad402d8679325bc514874370f02b5c2ac">jsonSerialize</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Fonctions membres publiques statiques    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_integer_1ad9bf5a7e7e57cde931b481360774a408">of</link> ($value)</para>
</listitem>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_integer_1a3e858ed10ecc4ae0572cff8c37678404">fromBase</link> (string $number, int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">base</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_integer_1aac6b075461d304a85cb10603e022856c">fromArbitraryBase</link> (string $number, string $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">alphabet</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_integer_1ac8b5a32816e89e8854f9d87bcfc93c5f">fromBytes</link> (string $value, bool $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">signed</link>=true)</para>
</listitem>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_integer_1ab0e39ffeb22201b51338466012c94e17">randomBits</link> (int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">numBits</link>, ?<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">randomBytesGenerator</link>=null)</para>
</listitem>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_integer_1a77dfdea61770f545c5ded67d7050a64a">randomRange</link> ($<link linkend="_class_brick_1_1_math_1_1_big_number_1a0ad355042f3be12fe2be77d05ddfc2bc">min</link>, $<link linkend="_class_brick_1_1_math_1_1_big_number_1a36cf4067863ecb459761a76ff631c854">max</link>, ?<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">randomBytesGenerator</link>=null)</para>
</listitem>
        </itemizedlist>
</simplesect>
Fonctions membres publiques statiques hérités de <link linkend="_class_brick_1_1_math_1_1_big_number">BigNumber</link>        <itemizedlist>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_number_1a0ad355042f3be12fe2be77d05ddfc2bc">min</link> (... $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">values</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_number_1a36cf4067863ecb459761a76ff631c854">max</link> (... $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">values</link>)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Fonctions membres protégées    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_brick_1_1_math_1_1_big_integer_1a83828889e1e984950366956d8726ae28">__construct</link> (string $value)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Membres hérités additionnels    </title>
Fonctions membres protégées statiques hérités de <link linkend="_class_brick_1_1_math_1_1_big_number">BigNumber</link>        <itemizedlist>
            <listitem><para>static <link linkend="_class_brick_1_1_math_1_1_big_number_1a0c70a63466a111d452e52e049429220e">create</link> (... $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">args</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Description détaillée</title>

<para>An arbitrary-size integer.</para>

<para>All methods accepting a number as a parameter accept either a BigInteger instance, an integer, or a string representing an arbitrary size integer.</para>

<para>@psalm-immutable </para>
</section>
<section>
<title>Documentation des constructeurs et destructeur</title>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a83828889e1e984950366956d8726ae28"/><section>
    <title>__construct()</title>
<indexterm><primary>__construct</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>__construct</secondary></indexterm>
<para><computeroutput>__construct (string $value)<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Protected constructor. Use a factory method to obtain an instance.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$value</entry><entry>
<para>A string of digits, with optional leading minus sign. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Documentation des fonctions membres</title>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ab1d6abfbdcd8c9dd63dfef565bd2cfcf"/><section>
    <title>__serialize()</title>
<indexterm><primary>__serialize</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>__serialize</secondary></indexterm>
<para><computeroutput>__serialize ( )</computeroutput></para>
<para>This method is required for serializing the object and SHOULD NOT be accessed directly. </para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a7516ca30af0db3cdbf9a7739b48ce91d"/><section>
    <title>__toString()</title>
<indexterm><primary>__toString</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>__toString</secondary></indexterm>
<para><computeroutput>__toString ( )</computeroutput></para>
<para>{
<para>Returns a string representation of this number.</para>

<para>The output of this method can be parsed by the <computeroutput><link linkend="_class_brick_1_1_math_1_1_big_number_1ad9bf5a7e7e57cde931b481360774a408">of()</link></computeroutput> factory method; this will yield an object equal to this one, without any information loss.</para>

<para><formalpara><title>Renvoie</title>

<para>string</para>
</formalpara>
</para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1a7516ca30af0db3cdbf9a7739b48ce91d">BigNumber</link>.</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a2fe5966ad9b8e1d91a37d3e055ac4938"/><section>
    <title>__unserialize()</title>
<indexterm><primary>__unserialize</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>__unserialize</secondary></indexterm>
<para><computeroutput>__unserialize (array $data)</computeroutput></para>
<para>This method is only here to allow unserializing the object and cannot be accessed directly. </para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1af3271c1a26c6f5de343ba9197e8f7a2e"/><section>
    <title>abs()</title>
<indexterm><primary>abs</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>abs</secondary></indexterm>
<para><computeroutput>abs ( )</computeroutput></para>
<para>Returns the absolute value of this number.</para>

<para><formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af3271c1a26c6f5de343ba9197e8f7a2e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af3271c1a26c6f5de343ba9197e8f7a2e_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a5c6eddfcb32543da7b3b18f14e92de02"/><section>
    <title>and()</title>
<indexterm><primary>and</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>and</secondary></indexterm>
<para><computeroutput>and ( $that)</computeroutput></para>
<para>Returns the integer bitwise-and combined with another integer.</para>

<para>This method returns a negative BigInteger if and only if both operands are negative.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The operand. Must be convertible to an integer number.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a5c6eddfcb32543da7b3b18f14e92de02_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a5c6eddfcb32543da7b3b18f14e92de02_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a49cef82ace4691910cc4465c47d1d9ec"/><section>
    <title>compareTo()</title>
<indexterm><primary>compareTo</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>compareTo</secondary></indexterm>
<para><computeroutput>compareTo ( $that)</computeroutput></para>
<para>{
<para>Compares this number to the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry><link linkend="_class_brick_1_1_math_1_1_big_number">BigNumber</link> | int | float | string</entry><entry>$that</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>int [-1,0,1] If <computeroutput>$this</computeroutput> is lower than, equal to, or greater than <computeroutput>$that</computeroutput>.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If the number is not valid.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1a49cef82ace4691910cc4465c47d1d9ec">BigNumber</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a49cef82ace4691910cc4465c47d1d9ec_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a947e7707b48cb05142ed10a3a09cac57"/><section>
    <title>dividedBy()</title>
<indexterm><primary>dividedBy</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>dividedBy</secondary></indexterm>
<para><computeroutput>dividedBy ( $that, int $roundingMode = <computeroutput><link linkend="_class_brick_1_1_math_1_1_rounding_mode_1a91be30d2d5343f30d7d280e5729c240b">RoundingMode::UNNECESSARY</link></computeroutput>
)</computeroutput></para>
<para>Returns the result of the division of this number by the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The divisor. Must be convertible to a BigInteger. </para>
</entry>
                            </row>
                            <row>
<entry>int</entry><entry>$roundingMode</entry><entry>
<para>An optional rounding mode.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger The result.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If the divisor is not a valid number, is not convertible to a BigInteger, is zero, or RoundingMode::UNNECESSARY is used and the remainder is not zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a947e7707b48cb05142ed10a3a09cac57_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a947e7707b48cb05142ed10a3a09cac57_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1aac6b075461d304a85cb10603e022856c"/><section>
    <title>fromArbitraryBase()</title>
<indexterm><primary>fromArbitraryBase</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>fromArbitraryBase</secondary></indexterm>
<para><computeroutput>static fromArbitraryBase (string $number, string $alphabet)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Parses a string containing an integer in an arbitrary base, using a custom alphabet.</para>

<para>Because this method accepts an alphabet with any character, including dash, it does not handle negative numbers.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$number</entry><entry>
<para>The number to parse. </para>
</entry>
                            </row>
                            <row>
<entry>string</entry><entry>$alphabet</entry><entry>
<para>The alphabet, for example &apos;01&apos; for base 2, or &apos;01234567&apos; for base 8.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NumberFormatException</entry><entry>
<para>If the given number is empty or contains invalid chars for the given alphabet. </para>
</entry>
                            </row>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If the alphabet does not contain at least 2 chars.</para>

<para>@psalm-pure </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_aac6b075461d304a85cb10603e022856c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a3e858ed10ecc4ae0572cff8c37678404"/><section>
    <title>fromBase()</title>
<indexterm><primary>fromBase</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>fromBase</secondary></indexterm>
<para><computeroutput>static fromBase (string $number, int $base)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Creates a number from a string in a given base.</para>

<para>The string can optionally be prefixed with the <computeroutput>+</computeroutput> or <computeroutput>-</computeroutput> sign.</para>

<para>Bases greater than 36 are not supported by this method, as there is no clear consensus on which of the lowercase or uppercase characters should come first. Instead, this method accepts any base up to 36, and does not differentiate lowercase and uppercase characters, which are considered equal.</para>

<para>For bases greater than 36, and/or custom alphabets, use the fromArbitraryBase() method.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$number</entry><entry>
<para>The number to convert, in the given base. </para>
</entry>
                            </row>
                            <row>
<entry>int</entry><entry>$base</entry><entry>
<para>The base of the number, between 2 and 36.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NumberFormatException</entry><entry>
<para>If the number is empty, or contains invalid chars for the given base. </para>
</entry>
                            </row>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If the base is out of range.</para>

<para>@psalm-pure </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a3e858ed10ecc4ae0572cff8c37678404_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a3e858ed10ecc4ae0572cff8c37678404_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ac8b5a32816e89e8854f9d87bcfc93c5f"/><section>
    <title>fromBytes()</title>
<indexterm><primary>fromBytes</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>fromBytes</secondary></indexterm>
<para><computeroutput>static fromBytes (string $value, bool $signed = <computeroutput>true</computeroutput>
)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Translates a string of bytes containing the binary representation of a BigInteger into a BigInteger.</para>

<para>The input string is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element.</para>

<para>If <computeroutput>$signed</computeroutput> is true, the input is assumed to be in two&apos;s-complement representation, and the leading bit is interpreted as a sign bit. If <computeroutput>$signed</computeroutput> is false, the input is interpreted as an unsigned number, and the resulting BigInteger will always be positive or zero.</para>

<para>This method can be used to retrieve a number exported by <computeroutput>toBytes()</computeroutput>, as long as the <computeroutput>$signed</computeroutput> flags match.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$value</entry><entry>
<para>The byte string. </para>
</entry>
                            </row>
                            <row>
<entry>bool</entry><entry>$signed</entry><entry>
<para>Whether to interpret as a signed number in two&apos;s-complement representation with a leading sign bit.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NumberFormatException</entry><entry>
<para>If the string is empty. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ac8b5a32816e89e8854f9d87bcfc93c5f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ac8b5a32816e89e8854f9d87bcfc93c5f_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1aa9d924e0b926ebf4be55a664c62e8003"/><section>
    <title>gcd()</title>
<indexterm><primary>gcd</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>gcd</secondary></indexterm>
<para><computeroutput>gcd ( $that)</computeroutput></para>
<para>Returns the greatest common divisor of this number and the given one.</para>

<para>The GCD is always positive, unless both operands are zero, in which case it is zero.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The operand. Must be convertible to an integer number.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_aa9d924e0b926ebf4be55a664c62e8003_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a4da8d256be769f3cf0ce76f37257d6b8"/><section>
    <title>getBitLength()</title>
<indexterm><primary>getBitLength</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>getBitLength</secondary></indexterm>
<para><computeroutput>getBitLength ( )</computeroutput></para>
<para>Returns the number of bits in the minimal two&apos;s-complement representation of this BigInteger, excluding a sign bit.</para>

<para>For positive BigIntegers, this is equivalent to the number of bits in the ordinary binary representation. Computes (ceil(log2(this &lt; 0 ? -this : this+1))).</para>

<para><formalpara><title>Renvoie</title>

<para>int </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a4da8d256be769f3cf0ce76f37257d6b8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a4da8d256be769f3cf0ce76f37257d6b8_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1aa11028695f143b243b1fcd4508c737c0"/><section>
    <title>getLowestSetBit()</title>
<indexterm><primary>getLowestSetBit</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>getLowestSetBit</secondary></indexterm>
<para><computeroutput>getLowestSetBit ( )</computeroutput></para>
<para>Returns the index of the rightmost (lowest-order) one bit in this BigInteger.</para>

<para>Returns -1 if this BigInteger contains no one bits.</para>

<para><formalpara><title>Renvoie</title>

<para>int </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_aa11028695f143b243b1fcd4508c737c0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a282c839169dc16e5d8bc47e8ac0f202b"/><section>
    <title>getSign()</title>
<indexterm><primary>getSign</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>getSign</secondary></indexterm>
<para><computeroutput>getSign ( )</computeroutput></para>
<para>{
<para>Returns the sign of this number.</para>

<para><formalpara><title>Renvoie</title>

<para>int -1 if the number is negative, 0 if zero, 1 if positive.</para>
</formalpara>
</para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1a282c839169dc16e5d8bc47e8ac0f202b">BigNumber</link>.</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ade2ff05c9aadf502bc3972b26b3633d1"/><section>
    <title>isEven()</title>
<indexterm><primary>isEven</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>isEven</secondary></indexterm>
<para><computeroutput>isEven ( )</computeroutput></para>
<para>Returns whether this number is even.</para>

<para><formalpara><title>Renvoie</title>

<para>bool </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ab358899040cc33e0a249d35839ab68d9"/><section>
    <title>isOdd()</title>
<indexterm><primary>isOdd</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>isOdd</secondary></indexterm>
<para><computeroutput>isOdd ( )</computeroutput></para>
<para>Returns whether this number is odd.</para>

<para><formalpara><title>Renvoie</title>

<para>bool </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a6dce32ad93c74e03ef90b3323e4973b0"/><section>
    <title>minus()</title>
<indexterm><primary>minus</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>minus</secondary></indexterm>
<para><computeroutput>minus ( $that)</computeroutput></para>
<para>Returns the difference of this number and the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The number to subtract. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger The result.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If the number is not valid, or is not convertible to a BigInteger. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a6dce32ad93c74e03ef90b3323e4973b0_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a6dce32ad93c74e03ef90b3323e4973b0_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1af26c99fc8f0469394ee52fb29452ec4b"/><section>
    <title>mod()</title>
<indexterm><primary>mod</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>mod</secondary></indexterm>
<para><computeroutput>mod ( $that)</computeroutput></para>
<para>Returns the modulo of this number and the given one.</para>

<para>The modulo operation yields the same result as the remainder operation when both operands are of the same sign, and may differ when signs are different.</para>

<para>The result of the modulo operation, when non-zero, has the same sign as the divisor.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The divisor. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>DivisionByZeroException</entry><entry>
<para>If the divisor is zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af26c99fc8f0469394ee52fb29452ec4b_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a85a7253fe275fbd5b12d41cd21f87289"/><section>
    <title>modInverse()</title>
<indexterm><primary>modInverse</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>modInverse</secondary></indexterm>
<para><computeroutput>modInverse (<link linkend="_class_brick_1_1_math_1_1_big_integer">BigInteger</link> $m)</computeroutput></para>
<para>Returns the modular multiplicative inverse of this BigInteger modulo $m.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigInteger</entry><entry>$m</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>DivisionByZeroException</entry><entry>
<para>If $m is zero. </para>
</entry>
                            </row>
                            <row>
<entry>NegativeNumberException</entry><entry>
<para>If $m is negative. </para>
</entry>
                            </row>
                            <row>
<entry>MathException</entry><entry>
<para>If this BigInteger has no multiplicative inverse mod m (that is, this BigInteger is not relatively prime to m). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a85a7253fe275fbd5b12d41cd21f87289_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1aec4489694f844f91e170c008475f2784"/><section>
    <title>modPow()</title>
<indexterm><primary>modPow</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>modPow</secondary></indexterm>
<para><computeroutput>modPow ( $exp,  $mod)</computeroutput></para>
<para>Returns this number raised into power with modulo.</para>

<para>This operation only works on positive numbers.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$exp</entry><entry>
<para>The exponent. Must be positive or zero. </para>
</entry>
                            </row>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$mod</entry><entry>
<para>The modulus. Must be strictly positive.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NegativeNumberException</entry><entry>
<para>If any of the operands is negative. </para>
</entry>
                            </row>
                            <row>
<entry>DivisionByZeroException</entry><entry>
<para>If the modulus is zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_aec4489694f844f91e170c008475f2784_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a1c315435ff00063776b1329c502bd047"/><section>
    <title>multipliedBy()</title>
<indexterm><primary>multipliedBy</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>multipliedBy</secondary></indexterm>
<para><computeroutput>multipliedBy ( $that)</computeroutput></para>
<para>Returns the product of this number and the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The multiplier. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger The result.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If the multiplier is not a valid number, or is not convertible to a BigInteger. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a1c315435ff00063776b1329c502bd047_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a1c315435ff00063776b1329c502bd047_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a921d7d43bb1c26467cec43b599585d61"/><section>
    <title>negated()</title>
<indexterm><primary>negated</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>negated</secondary></indexterm>
<para><computeroutput>negated ( )</computeroutput></para>
<para>Returns the inverse of this number.</para>

<para><formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a921d7d43bb1c26467cec43b599585d61_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a921d7d43bb1c26467cec43b599585d61_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ae4b749acc120be8c42b44ac42a2fc102"/><section>
    <title>not()</title>
<indexterm><primary>not</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>not</secondary></indexterm>
<para><computeroutput>not ( )</computeroutput></para>
<para>Returns the bitwise-not of this BigInteger.</para>

<para><formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ae4b749acc120be8c42b44ac42a2fc102_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ad9bf5a7e7e57cde931b481360774a408"/><section>
    <title>of()</title>
<indexterm><primary>of</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>of</secondary></indexterm>
<para><computeroutput>static of ( $value)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Creates a BigInteger of the given value.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$value</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If the value cannot be converted to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @psalm-pure </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1ad9bf5a7e7e57cde931b481360774a408">BigNumber</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ad9bf5a7e7e57cde931b481360774a408_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ad9bf5a7e7e57cde931b481360774a408_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ae6b92de86e57ff3506edf29a70190d59"/><section>
    <title>or()</title>
<indexterm><primary>or</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>or</secondary></indexterm>
<para><computeroutput>or ( $that)</computeroutput></para>
<para>Returns the integer bitwise-or combined with another integer.</para>

<para>This method returns a negative BigInteger if and only if either of the operands is negative.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The operand. Must be convertible to an integer number.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ae6b92de86e57ff3506edf29a70190d59_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ae6b92de86e57ff3506edf29a70190d59_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ac468fb693b5590834cd4b51f2d3e2451"/><section>
    <title>plus()</title>
<indexterm><primary>plus</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>plus</secondary></indexterm>
<para><computeroutput>plus ( $that)</computeroutput></para>
<para>Returns the sum of this number and the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The number to add. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger The result.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If the number is not valid, or is not convertible to a BigInteger. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ac468fb693b5590834cd4b51f2d3e2451_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a48ba2199706f00142e6843db53b6301f"/><section>
    <title>power()</title>
<indexterm><primary>power</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>power</secondary></indexterm>
<para><computeroutput>power (int $exponent)</computeroutput></para>
<para>Returns this number exponentiated to the given value.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$exponent</entry><entry>
<para>The exponent.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger The result.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If the exponent is not in the range 0 to 1,000,000. </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a48ba2199706f00142e6843db53b6301f_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a48ba2199706f00142e6843db53b6301f_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a39c36e67443d8f11820995d101290ab5"/><section>
    <title>quotient()</title>
<indexterm><primary>quotient</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>quotient</secondary></indexterm>
<para><computeroutput>quotient ( $that)</computeroutput></para>
<para>Returns the quotient of the division of this number by the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The divisor. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>DivisionByZeroException</entry><entry>
<para>If the divisor is zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a39c36e67443d8f11820995d101290ab5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a39c36e67443d8f11820995d101290ab5_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a91a55c7de19230602b30de0d0665380d"/><section>
    <title>quotientAndRemainder()</title>
<indexterm><primary>quotientAndRemainder</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>quotientAndRemainder</secondary></indexterm>
<para><computeroutput>quotientAndRemainder ( $that)</computeroutput></para>
<para>Returns the quotient and remainder of the division of this number by the given one.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The divisor. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger[] An array containing the quotient and the remainder.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>DivisionByZeroException</entry><entry>
<para>If the divisor is zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a91a55c7de19230602b30de0d0665380d_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ab0e39ffeb22201b51338466012c94e17"/><section>
    <title>randomBits()</title>
<indexterm><primary>randomBits</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>randomBits</secondary></indexterm>
<para><computeroutput>static randomBits (int $numBits, ?<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $randomBytesGenerator = <computeroutput>null</computeroutput>
)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Generates a pseudo-random number in the range 0 to 2^numBits - 1.</para>

<para>Using the default random bytes generator, this method is suitable for cryptographic use.</para>

<para>@psalm-param <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable(int)</link>: string $randomBytesGenerator</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$numBits</entry><entry>
<para>The number of bits. </para>
</entry>
                            </row>
                            <row>
<entry>callable | null</entry><entry>$randomBytesGenerator</entry><entry>
<para>A function that accepts a number of bytes as an integer, and returns a string of random bytes of the given length. Defaults to the <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">random_bytes()</link></computeroutput> function.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If $numBits is negative. </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ab0e39ffeb22201b51338466012c94e17_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ab0e39ffeb22201b51338466012c94e17_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a77dfdea61770f545c5ded67d7050a64a"/><section>
    <title>randomRange()</title>
<indexterm><primary>randomRange</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>randomRange</secondary></indexterm>
<para><computeroutput>static randomRange ( $min,  $max, ?<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $randomBytesGenerator = <computeroutput>null</computeroutput>
)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Generates a pseudo-random number between <computeroutput>$min</computeroutput> and <computeroutput>$max</computeroutput>.</para>

<para>Using the default random bytes generator, this method is suitable for cryptographic use.</para>

<para>@psalm-param (<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable(int)</link>: string)|null $randomBytesGenerator</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$min</entry><entry>
<para>The lower bound. Must be convertible to a BigInteger. </para>
</entry>
                            </row>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$max</entry><entry>
<para>The upper bound. Must be convertible to a BigInteger. </para>
</entry>
                            </row>
                            <row>
<entry>callable | null</entry><entry>$randomBytesGenerator</entry><entry>
<para>A function that accepts a number of bytes as an integer, and returns a string of random bytes of the given length. Defaults to the <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">random_bytes()</link></computeroutput> function.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If one of the parameters cannot be converted to a BigInteger, or <computeroutput>$min</computeroutput> is greater than <computeroutput>$max</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a77dfdea61770f545c5ded67d7050a64a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a75dfe9e6e90208994357a944dc914bc8"/><section>
    <title>remainder()</title>
<indexterm><primary>remainder</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>remainder</secondary></indexterm>
<para><computeroutput>remainder ( $that)</computeroutput></para>
<para>Returns the remainder of the division of this number by the given one.</para>

<para>The remainder, when non-zero, has the same sign as the dividend.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The divisor. Must be convertible to a BigInteger.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>DivisionByZeroException</entry><entry>
<para>If the divisor is zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a75dfe9e6e90208994357a944dc914bc8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a75dfe9e6e90208994357a944dc914bc8_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a4d9813fea8525b19a1d370eeb8fe41d6"/><section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>serialize</secondary></indexterm>
<para><computeroutput>serialize ( )</computeroutput></para>
<para>This method is required by interface Serializable and SHOULD NOT be accessed directly. </para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ac62ac67b36da688bd2ce51eb245f4ff5"/><section>
    <title>shiftedLeft()</title>
<indexterm><primary>shiftedLeft</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>shiftedLeft</secondary></indexterm>
<para><computeroutput>shiftedLeft (int $distance)</computeroutput></para>
<para>Returns the integer left shifted by a given number of bits.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$distance</entry><entry>
<para>The distance to shift.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ac62ac67b36da688bd2ce51eb245f4ff5_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ac62ac67b36da688bd2ce51eb245f4ff5_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1af71a2a311efb8c73ea38c5d27732c7b3"/><section>
    <title>shiftedRight()</title>
<indexterm><primary>shiftedRight</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>shiftedRight</secondary></indexterm>
<para><computeroutput>shiftedRight (int $distance)</computeroutput></para>
<para>Returns the integer right shifted by a given number of bits.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$distance</entry><entry>
<para>The distance to shift.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af71a2a311efb8c73ea38c5d27732c7b3_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af71a2a311efb8c73ea38c5d27732c7b3_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1ae583a39c807ea86e2fbb0e9b6551a224"/><section>
    <title>sqrt()</title>
<indexterm><primary>sqrt</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>sqrt</secondary></indexterm>
<para><computeroutput>sqrt ( )</computeroutput></para>
<para>Returns the integer square root number of this number, rounded down.</para>

<para>The result is the largest x such that x² ≤ n.</para>

<para><formalpara><title>Renvoie</title>

<para>BigInteger</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NegativeNumberException</entry><entry>
<para>If this number is negative. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_ae583a39c807ea86e2fbb0e9b6551a224_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1addb472df5696f6ca7ce0ff6fca3974cd"/><section>
    <title>testBit()</title>
<indexterm><primary>testBit</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>testBit</secondary></indexterm>
<para><computeroutput>testBit (int $n)</computeroutput></para>
<para>Returns true if and only if the designated bit is set.</para>

<para>Computes ((this &amp; (1&lt;&lt;n)) != 0).</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$n</entry><entry>
<para>The bit to test, 0-based.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>bool</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If the bit to test is negative. </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_addb472df5696f6ca7ce0ff6fca3974cd_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a7edc81716282fcd92a258b5cde88baf6"/><section>
    <title>toArbitraryBase()</title>
<indexterm><primary>toArbitraryBase</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toArbitraryBase</secondary></indexterm>
<para><computeroutput>toArbitraryBase (string $alphabet)</computeroutput></para>
<para>Returns a string representation of this number in an arbitrary base with a custom alphabet.</para>

<para>Because this method accepts an alphabet with any character, including dash, it does not handle negative numbers; a NegativeNumberException will be thrown when attempting to call this method on a negative number.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$alphabet</entry><entry>
<para>The alphabet, for example &apos;01&apos; for base 2, or &apos;01234567&apos; for base 8.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NegativeNumberException</entry><entry>
<para>If this number is negative. </para>
</entry>
                            </row>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If the given alphabet does not contain at least 2 chars. </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a7edc81716282fcd92a258b5cde88baf6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a34164fd96a3337ed92b51f6334e23e86"/><section>
    <title>toBase()</title>
<indexterm><primary>toBase</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toBase</secondary></indexterm>
<para><computeroutput>toBase (int $base)</computeroutput></para>
<para>Returns a string representation of this number in the given base.</para>

<para>The output will always be lowercase for bases greater than 10.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$base</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                InvalidArgumentException If the base is out of range. </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a34164fd96a3337ed92b51f6334e23e86_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a34164fd96a3337ed92b51f6334e23e86_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1af8b74778aff7e428d45509bb86408596"/><section>
    <title>toBigDecimal()</title>
<indexterm><primary>toBigDecimal</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toBigDecimal</secondary></indexterm>
<para><computeroutput>toBigDecimal ( )</computeroutput></para>
<para>{
<para>Converts this number to a <link linkend="_class_brick_1_1_math_1_1_big_decimal">BigDecimal</link>.</para>

<para><formalpara><title>Renvoie</title>

<para><link linkend="_class_brick_1_1_math_1_1_big_decimal">BigDecimal</link> The converted number.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RoundingNecessaryException</entry><entry>
<para>If this number cannot be converted to a <link linkend="_class_brick_1_1_math_1_1_big_decimal">BigDecimal</link> without rounding.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1af8b74778aff7e428d45509bb86408596">BigNumber</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af8b74778aff7e428d45509bb86408596_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af8b74778aff7e428d45509bb86408596_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a7b4bac2966b6e735a4aaa27d8b6fe37d"/><section>
    <title>toBigInteger()</title>
<indexterm><primary>toBigInteger</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toBigInteger</secondary></indexterm>
<para><computeroutput>toBigInteger ( )</computeroutput></para>
<para>{
<para>Converts this number to a <link linkend="_class_brick_1_1_math_1_1_big_integer">BigInteger</link>.</para>

<para><formalpara><title>Renvoie</title>

<para><link linkend="_class_brick_1_1_math_1_1_big_integer">BigInteger</link> The converted number.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RoundingNecessaryException</entry><entry>
<para>If this number cannot be converted to a <link linkend="_class_brick_1_1_math_1_1_big_integer">BigInteger</link> without rounding.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1a7b4bac2966b6e735a4aaa27d8b6fe37d">BigNumber</link>.</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a14c7fa5ae37a286d34765aa00329dd7c"/><section>
    <title>toBigRational()</title>
<indexterm><primary>toBigRational</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toBigRational</secondary></indexterm>
<para><computeroutput>toBigRational ( )</computeroutput></para>
<para>{
<para>Converts this number to a <link linkend="_class_brick_1_1_math_1_1_big_rational">BigRational</link>.</para>

<para><formalpara><title>Renvoie</title>

<para><link linkend="_class_brick_1_1_math_1_1_big_rational">BigRational</link> The converted number.</para>
</formalpara>
</para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1a14c7fa5ae37a286d34765aa00329dd7c">BigNumber</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_a14c7fa5ae37a286d34765aa00329dd7c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1acb8915bbda0d45f9f3e07ef480915552"/><section>
    <title>toBytes()</title>
<indexterm><primary>toBytes</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toBytes</secondary></indexterm>
<para><computeroutput>toBytes (bool $signed = <computeroutput>true</computeroutput>
)</computeroutput></para>
<para>Returns a string of bytes containing the binary representation of this BigInteger.</para>

<para>The string is in big-endian byte-order: the most significant byte is in the zeroth element.</para>

<para>If <computeroutput>$signed</computeroutput> is true, the output will be in two&apos;s-complement representation, and a sign bit will be prepended to the output. If <computeroutput>$signed</computeroutput> is false, no sign bit will be prepended, and this method will throw an exception if the number is negative.</para>

<para>The string will contain the minimum number of bytes required to represent this BigInteger, including a sign bit if <computeroutput>$signed</computeroutput> is true.</para>

<para>This representation is compatible with the <computeroutput>fromBytes()</computeroutput> factory method, as long as the <computeroutput>$signed</computeroutput> flags match.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>bool</entry><entry>$signed</entry><entry>
<para>Whether to output a signed number in two&apos;s-complement representation with a leading sign bit.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>NegativeNumberException</entry><entry>
<para>If $signed is false, and the number is negative. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_acb8915bbda0d45f9f3e07ef480915552_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1a3774efe5a19fbbc82f1206fbd6f6dd4b"/><section>
    <title>toFloat()</title>
<indexterm><primary>toFloat</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toFloat</secondary></indexterm>
<para><computeroutput>toFloat ( )</computeroutput></para>
<para>{
<para>Returns an approximation of this number as a floating-point value.</para>

<para>Note that this method can discard information as the precision of a floating-point value is inherently limited.</para>

<para>If the number is greater than the largest representable floating point number, positive infinity is returned. If the number is less than the smallest representable floating point number, negative infinity is returned.</para>

<para><formalpara><title>Renvoie</title>

<para>float The converted value.</para>
</formalpara>
</para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1a3774efe5a19fbbc82f1206fbd6f6dd4b">BigNumber</link>.</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1af925bcc620434a34f7ee4029b0700765"/><section>
    <title>toInt()</title>
<indexterm><primary>toInt</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toInt</secondary></indexterm>
<para><computeroutput>toInt ( )</computeroutput></para>
<para>{
<para>Returns the exact value of this number as a native integer.</para>

<para>If this number cannot be converted to a native integer without losing precision, an exception is thrown. Note that the acceptable range for an integer depends on the platform and differs for 32-bit and 64-bit.</para>

<para><formalpara><title>Renvoie</title>

<para>int The converted value.</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>MathException</entry><entry>
<para>If this number cannot be exactly converted to a native integer.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1af925bcc620434a34f7ee4029b0700765">BigNumber</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_af925bcc620434a34f7ee4029b0700765_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1aee98ca780c25d3d40c4c2f02f238e25c"/><section>
    <title>toScale()</title>
<indexterm><primary>toScale</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>toScale</secondary></indexterm>
<para><computeroutput>toScale (int $scale, int $roundingMode = <computeroutput><link linkend="_class_brick_1_1_math_1_1_rounding_mode_1a91be30d2d5343f30d7d280e5729c240b">RoundingMode::UNNECESSARY</link></computeroutput>
)</computeroutput></para>
<para>{
<para>Converts this number to a <link linkend="_class_brick_1_1_math_1_1_big_decimal">BigDecimal</link> with the given scale, using rounding if necessary.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$scale</entry><entry>
<para>The scale of the resulting <computeroutput><link linkend="_class_brick_1_1_math_1_1_big_decimal">BigDecimal</link></computeroutput>. </para>
</entry>
                            </row>
                            <row>
<entry>int</entry><entry>$roundingMode</entry><entry>
<para>A <computeroutput><link linkend="_class_brick_1_1_math_1_1_rounding_mode">RoundingMode</link></computeroutput> constant.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para><link linkend="_class_brick_1_1_math_1_1_big_decimal">BigDecimal</link></para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>RoundingNecessaryException</entry><entry>
<para>If this number cannot be converted to the given scale without rounding. This only applies when <link linkend="_class_brick_1_1_math_1_1_rounding_mode_1a91be30d2d5343f30d7d280e5729c240b">RoundingMode::UNNECESSARY</link> is used.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
} </para>
<para>
Réimplémentée à partir de <link linkend="_class_brick_1_1_math_1_1_big_number_1aee98ca780c25d3d40c4c2f02f238e25c">BigNumber</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_aee98ca780c25d3d40c4c2f02f238e25c_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1aa95be162020f9db2ba2506f0edc7f7df"/><section>
    <title>unserialize()</title>
<indexterm><primary>unserialize</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>unserialize</secondary></indexterm>
<para><computeroutput>unserialize ( $value)</computeroutput></para>
<para>This method is only here to implement interface Serializable and cannot be accessed directly. </para>
</section>
<anchor xml:id="_class_brick_1_1_math_1_1_big_integer_1afc7809229fa54dc9d3662a7718cdb536"/><section>
    <title>xor()</title>
<indexterm><primary>xor</primary><secondary>BigInteger</secondary></indexterm>
<indexterm><primary>BigInteger</primary><secondary>xor</secondary></indexterm>
<para><computeroutput>xor ( $that)</computeroutput></para>
<para>Returns the integer bitwise-xor combined with another integer.</para>

<para>This method returns a negative BigInteger if and only if exactly one of the operands is negative.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>BigNumber | int | float | string</entry><entry>$that</entry><entry>
<para>The operand. Must be convertible to an integer number.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>BigInteger </para>
</formalpara>
</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_afc7809229fa54dc9d3662a7718cdb536_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_brick_1_1_math_1_1_big_integer_afc7809229fa54dc9d3662a7718cdb536_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<para>
La documentation de cette classe a été générée à partir du fichier suivant :</para>
public/glpi/vendor/brick/math/src/<link linkend="__big_integer_8php">BigInteger.php</link></section>
</section>
