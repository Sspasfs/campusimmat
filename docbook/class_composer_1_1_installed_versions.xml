<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_composer_1_1_installed_versions" xml:lang="fr">
<title>Référence de la classe InstalledVersions</title>
<indexterm><primary>InstalledVersions</primary></indexterm>
Graphe de collaboration de InstalledVersions:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_composer_1_1_installed_versions__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Fonctions membres publiques statiques    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a9cb7471a8b6134787cbd06973c4336d3">getInstalledPackages</link> ()</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1aa3ef32a5757a433a28cbe63ea9fff2df">getInstalledPackagesByType</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">type</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1ac9863ed3d65259cb0a9a5bcc5afffa7e">isInstalled</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">includeDevRequirements</link>=true)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a309342b07e5af8c14d76e2c50b7543d4">satisfies</link> (VersionParser $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">parser</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">constraint</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a6025d8d3ea9ca84bd6e2a7409b7404a6">getVersionRanges</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1af424daaec3a1ccfb2d1bbd55733c9121">getVersion</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a0e688c2f203f84ce4bddafdf3828144e">getPrettyVersion</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1abd701ad696ab5b5b77b6cc5e46a35f36">getReference</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a8ad0cf11b4859b96de3c34fd4851342f">getInstallPath</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">packageName</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1ac82ce683d4615705dc55ed67d2804e55">getRootPackage</link> ()</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a6ecee8643c03c515b55686f03d117665">getRawData</link> ()</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a3a09ac4f4e098f4c04c31cfb88a8e256">getAllRawData</link> ()</para>
</listitem>
            <listitem><para>static <link linkend="_class_composer_1_1_installed_versions_1a01b4ca6bbbb1e3337f987c9461405985">reload</link> ($data)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Description détaillée</title>

<para>This class is copied in every <link linkend="_namespace_composer">Composer</link> installed project and available to all</para>

<para>See also <link xlink:href="https://getcomposer.org/doc/07-runtime.md#installed-versions">https://getcomposer.org/doc/07-runtime.md#installed-versions</link></para>

<para>To require its presence, you can require <computeroutput>composer-runtime-api ^2.0</computeroutput></para>

<para>@final </para>
</section>
<section>
<title>Documentation des fonctions membres</title>
<anchor xml:id="_class_composer_1_1_installed_versions_1a3a09ac4f4e098f4c04c31cfb88a8e256"/><section>
    <title>getAllRawData()</title>
<indexterm><primary>getAllRawData</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getAllRawData</secondary></indexterm>
<para><computeroutput>static getAllRawData ( )<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns the raw data of all <link linkend="_installed_8php">installed.php</link> which are currently loaded for custom implementations</para>

<para><formalpara><title>Renvoie</title>

<para>array[] @psalm-return list&lt;array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array&lt;string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}&gt;}&gt; </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a9cb7471a8b6134787cbd06973c4336d3"/><section>
    <title>getInstalledPackages()</title>
<indexterm><primary>getInstalledPackages</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getInstalledPackages</secondary></indexterm>
<para><computeroutput>static getInstalledPackages ( )<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns a list of all package names which are present, either by being installed, replaced or provided</para>

<para><formalpara><title>Renvoie</title>

<para>string[] @psalm-return list&lt;string&gt; </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1aa3ef32a5757a433a28cbe63ea9fff2df"/><section>
    <title>getInstalledPackagesByType()</title>
<indexterm><primary>getInstalledPackagesByType</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getInstalledPackagesByType</secondary></indexterm>
<para><computeroutput>static getInstalledPackagesByType ( $type)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns a list of all package names with a specific type e.g. &apos;library&apos;</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$type</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string[] @psalm-return list&lt;string&gt; </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a8ad0cf11b4859b96de3c34fd4851342f"/><section>
    <title>getInstallPath()</title>
<indexterm><primary>getInstallPath</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getInstallPath</secondary></indexterm>
<para><computeroutput>static getInstallPath ( $packageName)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string|null If the package is being replaced or provided but is not really installed, null will be returned as install path. Packages of type metapackages also have a null install path. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a0e688c2f203f84ce4bddafdf3828144e"/><section>
    <title>getPrettyVersion()</title>
<indexterm><primary>getPrettyVersion</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getPrettyVersion</secondary></indexterm>
<para><computeroutput>static getPrettyVersion ( $packageName)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a6ecee8643c03c515b55686f03d117665"/><section>
    <title>getRawData()</title>
<indexterm><primary>getRawData</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getRawData</secondary></indexterm>
<para><computeroutput>static getRawData ( )<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns the raw <link linkend="_installed_8php">installed.php</link> data for custom implementations</para>

<para><para><link linkend="_deprecated_1_deprecated000024">Obsolète</link> 
<para>Use getAllRawData() instead which returns all datasets for all autoloaders present in the process. getRawData only returns the first dataset loaded, which may not be what you expect. </para>
</para><formalpara><title>Renvoie</title>

<para>array[] @psalm-return array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array&lt;string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}&gt;} </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1abd701ad696ab5b5b77b6cc5e46a35f36"/><section>
    <title>getReference()</title>
<indexterm><primary>getReference</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getReference</secondary></indexterm>
<para><computeroutput>static getReference ( $packageName)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string|null If the package is being replaced or provided but is not really installed, null will be returned as reference </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1ac82ce683d4615705dc55ed67d2804e55"/><section>
    <title>getRootPackage()</title>
<indexterm><primary>getRootPackage</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getRootPackage</secondary></indexterm>
<para><computeroutput>static getRootPackage ( )<computeroutput>[static]</computeroutput></computeroutput></para>
<para><formalpara><title>Renvoie</title>

<para>array @psalm-return array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool} </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1af424daaec3a1ccfb2d1bbd55733c9121"/><section>
    <title>getVersion()</title>
<indexterm><primary>getVersion</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getVersion</secondary></indexterm>
<para><computeroutput>static getVersion ( $packageName)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string|null If the package is being replaced or provided but is not really installed, null will be returned as version, use satisfies or getVersionRanges if you need to know if a given version is present </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a6025d8d3ea9ca84bd6e2a7409b7404a6"/><section>
    <title>getVersionRanges()</title>
<indexterm><primary>getVersionRanges</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>getVersionRanges</secondary></indexterm>
<para><computeroutput>static getVersionRanges ( $packageName)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Returns a version constraint representing all the range(s) which are installed for a given package</para>

<para>It is easier to use this via isInstalled() with the $constraint argument if you need to check whether a given version of a package is installed, and not just whether it exists</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>string Version constraint usable with composer/semver </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1ac9863ed3d65259cb0a9a5bcc5afffa7e"/><section>
    <title>isInstalled()</title>
<indexterm><primary>isInstalled</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>isInstalled</secondary></indexterm>
<para><computeroutput>static isInstalled ( $packageName,  $includeDevRequirements = <computeroutput>true</computeroutput>
)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Checks whether the given package is installed</para>

<para>This also returns true if the package name is provided or replaced by another package</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>bool</entry><entry>$includeDevRequirements</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>bool </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a01b4ca6bbbb1e3337f987c9461405985"/><section>
    <title>reload()</title>
<indexterm><primary>reload</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>reload</secondary></indexterm>
<para><computeroutput>static reload ( $data)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Lets you reload the static array from another file</para>

<para>This is only useful for complex integrations in which a project needs to use this class but then also needs to execute another project&apos;s autoloader in process, and wants to ensure both projects have access to their version of <link linkend="_installed_8php">installed.php</link>.</para>

<para>A typical case would be PHPUnit, where it would need to make sure it reads all the data it needs from this class, then call reload() with <computeroutput>require $CWD/vendor/composer/installed.php</computeroutput> (or similar) as input to make sure the project in which it runs can then also use this class safely, without interference between PHPUnit&apos;s dependencies and the project&apos;s dependencies.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>array[]</entry><entry>$data</entry><entry>
<para>A <link linkend="_installed_8php">vendor/composer/installed.php</link> data set </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>void</para>
</formalpara>
@psalm-param array{root: array{name: string, pretty_version: string, version: string, reference: string|null, type: string, install_path: string, aliases: string[], dev: bool}, versions: array&lt;string, array{pretty_version?: string, version?: string, reference?: string|null, type?: string, install_path?: string, aliases?: string[], dev_requirement: bool, replaced?: string[], provided?: string[]}&gt;} $data </para>
</section>
<anchor xml:id="_class_composer_1_1_installed_versions_1a309342b07e5af8c14d76e2c50b7543d4"/><section>
    <title>satisfies()</title>
<indexterm><primary>satisfies</primary><secondary>InstalledVersions</secondary></indexterm>
<indexterm><primary>InstalledVersions</primary><secondary>satisfies</secondary></indexterm>
<para><computeroutput>static satisfies (VersionParser $parser,  $packageName,  $constraint)<computeroutput>[static]</computeroutput></computeroutput></para>
<para>Checks whether the given package satisfies a version constraint</para>

<para>e.g. If you want to know whether version 2.3+ of package foo/bar is installed, you would call:</para>

<para><link linkend="_namespace_composer">Composer</link>\InstalledVersions::satisfies(new VersionParser, &apos;foo/bar&apos;, &apos;^2.3&apos;)</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>VersionParser</entry><entry>$parser</entry><entry>
<para>Install composer/semver to have access to this class and functionality </para>
</entry>
                            </row>
                            <row>
<entry>string</entry><entry>$packageName</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>string | null</entry><entry>$constraint</entry><entry>
<para>A version constraint to check for, if you pass one you have to make sure composer/semver is required by your package </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>bool </para>
</formalpara>
</para>
</section>
<para>
La documentation de cette classe a été générée à partir du fichier suivant :</para>
public/glpi/vendor/composer/<link linkend="__installed_versions_8php">InstalledVersions.php</link></section>
</section>
