<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler" xml:lang="fr">
<title>Référence de la classe FingersCrossedHandler</title>
<indexterm><primary>FingersCrossedHandler</primary></indexterm>
Graphe d&apos;héritage de FingersCrossedHandler:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Graphe de collaboration de FingersCrossedHandler:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Fonctions membres publiques    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a4e39a0c9c6dcced487fe90f6c1390f0e">__construct</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">handler</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">activationStrategy</link>=null, int $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">bufferSize</link>=0, bool $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">bubble</link>=true, bool $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">stopBuffering</link>=true, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">passthruLevel</link>=null)</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1abbfbbcd3430dea8422ecd3c725737758">isHandling</link> (array $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">record</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1af77f85c4b8f7ae6e8ecc3e0ad2ceb350">activate</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aa69c8bf1f1dcf4e72552efff1fe3e87e">close</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a4a20559544fdf4dcb457e258dc976cf8">reset</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aa821bec12eaa7e0f649397c9675ff505">clear</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a2b88a8966dc3917966810f7e1e93c5c5">getHandler</link> (array $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">record</link>=null)</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a87804f2347dd817752ef1faa1f0dea05">setFormatter</link> (<link linkend="_interface_monolog_1_1_formatter_1_1_formatter_interface">FormatterInterface</link> $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">formatter</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aad3a8e83c90770a1f71a75bb51e782d8">getFormatter</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
Fonctions membres publiques hérités de <link linkend="_class_monolog_1_1_handler_1_1_handler">Handler</link>        <itemizedlist>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_handler_1a944865926b0302ad2d802bea1eec3a57">handleBatch</link> (array $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">records</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_handler_1a421831a265621325e1fdd19aace0c758">__destruct</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_handler_1aaf11785905da71774e052912d784e3b4">__sleep</link> ()</para>
</listitem>
        </itemizedlist>
Fonctions membres publiques hérités de <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface">HandlerInterface</link>        <itemizedlist>
            <listitem><para><link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1ad54b568c673b7b4fc724268a54313603">handle</link> (array $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">record</link>)</para>
</listitem>
        </itemizedlist>
Fonctions membres publiques hérités de <link linkend="_interface_monolog_1_1_handler_1_1_processable_handler_interface">ProcessableHandlerInterface</link>        <itemizedlist>
            <listitem><para><link linkend="_interface_monolog_1_1_handler_1_1_processable_handler_interface_1a14c91c0ddce4f5cb91bc031e68c00453">pushProcessor</link> (<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callback</link>)</para>
</listitem>
            <listitem><para><link linkend="_interface_monolog_1_1_handler_1_1_processable_handler_interface_1aece5018a30e181b7c02b82a8470b5017">popProcessor</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Attributs protégés    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a9285a7f684c72e9bb78fdef1bcbe3fd0">$handler</link></para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a16863f1f2356234a9133f644953127fc">$activationStrategy</link></para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1ad7ca1737d01a61f443060645c1f3ae7a">$buffering</link> = true</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a17c521c4314b58090cecc52aae5e6a5f">$bufferSize</link></para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1af1862006a19e84e552f66189adc792ae">$buffer</link> = []</para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a5d278686eaf4debdc2c5087d02f1e9c4">$stopBuffering</link></para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aac44af4dd577eca24d1fdb69f1b76060">$passthruLevel</link></para>
</listitem>
            <listitem><para><link linkend="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a9145e898a529a9347d8af930c6c3c60c">$bubble</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Description détaillée</title>

<para>Buffers all records until a certain level is reached</para>

<para>The advantage of this approach is that you don&apos;t get any clutter in your log files. Only requests which actually trigger an error (or whatever your actionLevel is) will be in the logs, but they will contain all records, not only those above the level threshold.</para>

<para>You can then have a passthruLevel as well which means that at the end of the request, even if it did not get activated, it will still send through log records of e.g. at least a warning level.</para>

<para>You can find the various activation strategies in the <link linkend="_namespace_monolog">Monolog</link>\Handler\FingersCrossed\ namespace.</para>

<para><formalpara><title>Auteur</title>

<para>Jordi Boggiano <link xlink:href="mailto:j.boggiano@seld.be">j.boggiano@seld.be</link></para>
</formalpara>
@phpstan-import-type Record from \Monolog\Logger @phpstan-import-type Level from \Monolog\Logger @phpstan-import-type LevelName from \Monolog\Logger </para>
</section>
<section>
<title>Documentation des constructeurs et destructeur</title>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a4e39a0c9c6dcced487fe90f6c1390f0e"/><section>
    <title>__construct()</title>
<indexterm><primary>__construct</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>__construct</secondary></indexterm>
<para><computeroutput>__construct ( $handler,  $activationStrategy = <computeroutput>null</computeroutput>
, int $bufferSize = <computeroutput>0</computeroutput>
, bool $bubble = <computeroutput>true</computeroutput>
, bool $stopBuffering = <computeroutput>true</computeroutput>
,  $passthruLevel = <computeroutput>null</computeroutput>
)</computeroutput></para>
<para>@psalm-param HandlerInterface|callable(?Record, HandlerInterface): HandlerInterface $handler</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>callable | HandlerInterface</entry><entry>$handler</entry><entry>
<para>Handler or factory callable($record|null, $fingersCrossedHandler). </para>
</entry>
                            </row>
                            <row>
<entry>int | string | ActivationStrategyInterface</entry><entry>$activationStrategy</entry><entry>
<para>Strategy which determines when this handler takes action, or a level name/value at which the handler is activated </para>
</entry>
                            </row>
                            <row>
<entry>int</entry><entry>$bufferSize</entry><entry>
<para>How many entries should be buffered at most, beyond that the oldest items are removed from the buffer. </para>
</entry>
                            </row>
                            <row>
<entry>bool</entry><entry>$bubble</entry><entry>
<para>Whether the messages that are handled can bubble up the stack or not </para>
</entry>
                            </row>
                            <row>
<entry>bool</entry><entry>$stopBuffering</entry><entry>
<para>Whether the handler should stop buffering after being triggered (default true) </para>
</entry>
                            </row>
                            <row>
<entry>int | string</entry><entry>$passthruLevel</entry><entry>
<para>Minimum level to always flush to handler on close, even if strategy not triggered</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @phpstan-param Level|LevelName|LogLevel::* $passthruLevel @phpstan-param Level|LevelName|LogLevel::*|ActivationStrategyInterface $activationStrategy </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_a4e39a0c9c6dcced487fe90f6c1390f0e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Documentation des fonctions membres</title>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1af77f85c4b8f7ae6e8ecc3e0ad2ceb350"/><section>
    <title>activate()</title>
<indexterm><primary>activate</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>activate</secondary></indexterm>
<para><computeroutput>activate ( )</computeroutput></para>
<para>Manually activate this logger regardless of the activation strategy </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_af77f85c4b8f7ae6e8ecc3e0ad2ceb350_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aa821bec12eaa7e0f649397c9675ff505"/><section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>clear ( )</computeroutput></para>
<para>Clears the buffer without flushing any messages down to the wrapped handler.</para>

<para>It also resets the handler to its initial buffering state. </para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_aa821bec12eaa7e0f649397c9675ff505_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aa69c8bf1f1dcf4e72552efff1fe3e87e"/><section>
    <title>close()</title>
<indexterm><primary>close</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>close</secondary></indexterm>
<para><computeroutput>close ( )</computeroutput></para>
<para>
<para>
<para>Closes the handler.</para>

<para>Ends a log cycle and frees all resources used by the handler.</para>

<para>Closing a <link linkend="_class_monolog_1_1_handler_1_1_handler">Handler</link> means flushing all buffers and freeing any open resources/handles.</para>

<para>Implementations have to be idempotent (i.e. it should be possible to call close several times without breakage) and ideally handlers should be able to reopen themselves on <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1ad54b568c673b7b4fc724268a54313603">handle()</link> after they have been closed.</para>

<para>This is useful at the end of a request and will be called automatically when the object is destroyed if you extend <link linkend="_namespace_monolog">Monolog</link>\Handler\Handler.</para>

<para>If you are thinking of calling this method yourself, most likely you should be calling <link linkend="_interface_monolog_1_1_resettable_interface_1a4a20559544fdf4dcb457e258dc976cf8">ResettableInterface::reset</link> instead. Have a look.</para>
</para>
 </para>
<para>
Réimplémentée à partir de <link linkend="_class_monolog_1_1_handler_1_1_handler_1aa69c8bf1f1dcf4e72552efff1fe3e87e">Handler</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_aa69c8bf1f1dcf4e72552efff1fe3e87e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aad3a8e83c90770a1f71a75bb51e782d8"/><section>
    <title>getFormatter()</title>
<indexterm><primary>getFormatter</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>getFormatter</secondary></indexterm>
<para><computeroutput>getFormatter ( )</computeroutput></para>
<para>
<para>Gets the formatter.</para>

<para><formalpara><title>Renvoie</title>

<para>FormatterInterface</para>
</formalpara>
</para>
 </para>
<para>
Implémente <link linkend="_interface_monolog_1_1_handler_1_1_formattable_handler_interface_1aad3a8e83c90770a1f71a75bb51e782d8">FormattableHandlerInterface</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_aad3a8e83c90770a1f71a75bb51e782d8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a2b88a8966dc3917966810f7e1e93c5c5"/><section>
    <title>getHandler()</title>
<indexterm><primary>getHandler</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>getHandler</secondary></indexterm>
<para><computeroutput>getHandler (array $record = <computeroutput>null</computeroutput>
)</computeroutput></para>
<para>Return the nested handler</para>

<para>If the handler was provided as a factory callable, this will trigger the handler&apos;s instantiation.</para>

<para><formalpara><title>Renvoie</title>

<para>HandlerInterface</para>
</formalpara>
@phpstan-param Record $record </para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_a2b88a8966dc3917966810f7e1e93c5c5_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1abbfbbcd3430dea8422ecd3c725737758"/><section>
    <title>isHandling()</title>
<indexterm><primary>isHandling</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>isHandling</secondary></indexterm>
<para><computeroutput>isHandling (array $record)</computeroutput></para>
<para>
<para>Checks whether the given record will be handled by this handler.</para>

<para>This is mostly done for performance reasons, to avoid calling processors for nothing.</para>

<para>Handlers should still check the record levels within <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1ad54b568c673b7b4fc724268a54313603">handle()</link>, returning false in <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1abbfbbcd3430dea8422ecd3c725737758">isHandling()</link> is no guarantee that <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1ad54b568c673b7b4fc724268a54313603">handle()</link> will not be called, and <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1abbfbbcd3430dea8422ecd3c725737758">isHandling()</link> might not be called for a given record.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>array</entry><entry>$record</entry><entry>
<para>Partial log record containing only a level key</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>bool</para>
</formalpara>
@phpstan-param array{level: Level} $record</para>
 </para>
<para>
Implémente <link linkend="_interface_monolog_1_1_handler_1_1_handler_interface_1abbfbbcd3430dea8422ecd3c725737758">HandlerInterface</link>.</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a4a20559544fdf4dcb457e258dc976cf8"/><section>
    <title>reset()</title>
<indexterm><primary>reset</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>reset</secondary></indexterm>
<para><computeroutput>reset ( )</computeroutput></para>
<para><formalpara><title>Renvoie</title>

<para>void </para>
</formalpara>
</para>
<para>
Implémente <link linkend="_interface_monolog_1_1_resettable_interface_1a4a20559544fdf4dcb457e258dc976cf8">ResettableInterface</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_a4a20559544fdf4dcb457e258dc976cf8_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_a4a20559544fdf4dcb457e258dc976cf8_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a87804f2347dd817752ef1faa1f0dea05"/><section>
    <title>setFormatter()</title>
<indexterm><primary>setFormatter</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>setFormatter</secondary></indexterm>
<para><computeroutput>setFormatter (<link linkend="_interface_monolog_1_1_formatter_1_1_formatter_interface">FormatterInterface</link> $formatter)</computeroutput></para>
<para>
<para>Sets the formatter.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>FormatterInterface</entry><entry>$formatter</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para><link linkend="_interface_monolog_1_1_handler_1_1_handler_interface">HandlerInterface</link> self</para>
</formalpara>
</para>
 </para>
<para>
Implémente <link linkend="_interface_monolog_1_1_handler_1_1_formattable_handler_interface_1a87804f2347dd817752ef1faa1f0dea05">FormattableHandlerInterface</link>.</para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_monolog_1_1_handler_1_1_fingers_crossed_handler_a87804f2347dd817752ef1faa1f0dea05_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Documentation des champs</title>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a16863f1f2356234a9133f644953127fc"/><section>
    <title>$activationStrategy</title>
<indexterm><primary>$activationStrategy</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$activationStrategy</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">activationStrategy</link><computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a9145e898a529a9347d8af930c6c3c60c"/><section>
    <title>$bubble</title>
<indexterm><primary>$bubble</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$bubble</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">bubble</link><computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1af1862006a19e84e552f66189adc792ae"/><section>
    <title>$buffer</title>
<indexterm><primary>$buffer</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$buffer</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">buffer</link> = []<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1ad7ca1737d01a61f443060645c1f3ae7a"/><section>
    <title>$buffering</title>
<indexterm><primary>$buffering</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$buffering</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">buffering</link> = true<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a17c521c4314b58090cecc52aae5e6a5f"/><section>
    <title>$bufferSize</title>
<indexterm><primary>$bufferSize</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$bufferSize</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">bufferSize</link><computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a9285a7f684c72e9bb78fdef1bcbe3fd0"/><section>
    <title>$handler</title>
<indexterm><primary>$handler</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$handler</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">handler</link><computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1aac44af4dd577eca24d1fdb69f1b76060"/><section>
    <title>$passthruLevel</title>
<indexterm><primary>$passthruLevel</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$passthruLevel</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">passthruLevel</link><computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_monolog_1_1_handler_1_1_fingers_crossed_handler_1a5d278686eaf4debdc2c5087d02f1e9c4"/><section>
    <title>$stopBuffering</title>
<indexterm><primary>$stopBuffering</primary><secondary>FingersCrossedHandler</secondary></indexterm>
<indexterm><primary>FingersCrossedHandler</primary><secondary>$stopBuffering</secondary></indexterm>
<para><computeroutput>$<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">stopBuffering</link><computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
La documentation de cette classe a été générée à partir du fichier suivant :</para>
public/glpi/vendor/monolog/monolog/src/Monolog/Handler/<link linkend="__fingers_crossed_handler_8php">FingersCrossedHandler.php</link></section>
</section>
