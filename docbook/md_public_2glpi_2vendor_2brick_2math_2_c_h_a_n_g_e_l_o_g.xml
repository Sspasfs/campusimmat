<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g" xml:lang="fr">
<title>Changelog</title>
<indexterm><primary>Changelog</primary></indexterm>

<para><anchor xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5646"/> All notable changes to this project will be documented in this file.</para>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5647">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.9.3">0.9.3</link> - 2021-08-15</title></title>

<para>🚀 <emphasis role="bold">Compatibility with PHP 8.1</emphasis></para>

<para><itemizedlist>
<listitem>
<para>Support for custom object serialization; this removes a warning on PHP 8.1 due to the <computeroutput>Serializable</computeroutput> interface being deprecated (thanks @TRowbotham)</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5648">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.9.2">0.9.2</link> - 2021-01-20</title></title>

<para>🐛 <emphasis role="bold">Bug fix</emphasis></para>

<para><itemizedlist>
<listitem>
<para>Incorrect results could be returned when using the BCMath calculator, with a default scale set with <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">bcscale()</link></computeroutput>, on PHP &gt;= 7.2 (#55).</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5649">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.9.1">0.9.1</link> - 2020-08-19</title></title>

<para>✨ New features</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::not()</computeroutput> returns the bitwise <computeroutput>NOT</computeroutput> value</para>
</listitem></itemizedlist>
</para>

<para>🐛 <emphasis role="bold">Bug fixes</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::toBytes()</computeroutput> could return an incorrect binary representation for some numbers</para>
</listitem><listitem>
<para>The bitwise operations <computeroutput>and()</computeroutput>, <computeroutput>or()</computeroutput>, <computeroutput>xor()</computeroutput> on <computeroutput>BigInteger</computeroutput> could return an incorrect result when the GMP extension is not available</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5650">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.9.0">0.9.0</link> - 2020-08-18</title></title>

<para>👌 <emphasis role="bold">Improvements</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigNumber::of()</computeroutput> now accepts <computeroutput>.123</computeroutput> and <computeroutput>123.</computeroutput> formats, both of which return a <computeroutput>BigDecimal</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>💥 <emphasis role="bold">Breaking changes</emphasis></para>

<para><itemizedlist>
<listitem>
<para>Deprecated method <computeroutput>BigInteger::powerMod()</computeroutput> has been removed - use <computeroutput>modPow()</computeroutput> instead</para>
</listitem><listitem>
<para>Deprecated method <computeroutput>BigInteger::parse()</computeroutput> has been removed - use <computeroutput>fromBase()</computeroutput> instead</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5651">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.17">0.8.17</link> - 2020-08-19</title></title>

<para>🐛 <emphasis role="bold">Bug fix</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::toBytes()</computeroutput> could return an incorrect binary representation for some numbers</para>
</listitem><listitem>
<para>The bitwise operations <computeroutput>and()</computeroutput>, <computeroutput>or()</computeroutput>, <computeroutput>xor()</computeroutput> on <computeroutput>BigInteger</computeroutput> could return an incorrect result when the GMP extension is not available</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5652">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.16">0.8.16</link> - 2020-08-18</title></title>

<para>🚑 <emphasis role="bold">Critical fix</emphasis></para>

<para><itemizedlist>
<listitem>
<para>This version reintroduces the deprecated <computeroutput>BigInteger::parse()</computeroutput> method, that has been removed by mistake in version <computeroutput>0.8.9</computeroutput> and should have lasted for the whole <computeroutput>0.8</computeroutput> release cycle.</para>
</listitem></itemizedlist>
</para>

<para>✨ <emphasis role="bold">New features</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::modInverse()</computeroutput> calculates a modular multiplicative inverse</para>
</listitem><listitem>
<para><computeroutput>BigInteger::fromBytes()</computeroutput> creates a <computeroutput>BigInteger</computeroutput> from a byte string</para>
</listitem><listitem>
<para><computeroutput>BigInteger::toBytes()</computeroutput> converts a <computeroutput>BigInteger</computeroutput> to a byte string</para>
</listitem><listitem>
<para><computeroutput>BigInteger::randomBits()</computeroutput> creates a pseudo-random <computeroutput>BigInteger</computeroutput> of a given bit length</para>
</listitem><listitem>
<para><computeroutput>BigInteger::randomRange()</computeroutput> creates a pseudo-random <computeroutput>BigInteger</computeroutput> between two bounds</para>
</listitem></itemizedlist>
</para>

<para>💩 <emphasis role="bold">Deprecations</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::powerMod()</computeroutput> is now deprecated in favour of <computeroutput>modPow()</computeroutput></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5653">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.15">0.8.15</link> - 2020-04-15</title></title>

<para>🐛 <emphasis role="bold">Fixes</emphasis></para>

<para><itemizedlist>
<listitem>
<para>added missing <computeroutput>ext-json</computeroutput> requirement, due to <computeroutput>BigNumber</computeroutput> implementing <computeroutput>JsonSerializable</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>⚡️ <emphasis role="bold">Optimizations</emphasis></para>

<para><itemizedlist>
<listitem>
<para>additional optimization in <computeroutput>BigInteger::remainder()</computeroutput></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5654">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.14">0.8.14</link> - 2020-02-18</title></title>

<para>✨ <emphasis role="bold">New features</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::getLowestSetBit()</computeroutput> returns the index of the rightmost one bit</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5655">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.13">0.8.13</link> - 2020-02-16</title></title>

<para>✨ <emphasis role="bold">New features</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::isEven()</computeroutput> tests whether the number is even</para>
</listitem><listitem>
<para><computeroutput>BigInteger::isOdd()</computeroutput> tests whether the number is odd</para>
</listitem><listitem>
<para><computeroutput>BigInteger::testBit()</computeroutput> tests if a bit is set</para>
</listitem><listitem>
<para><computeroutput>BigInteger::getBitLength()</computeroutput> returns the number of bits in the minimal representation of the number</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5656">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.12">0.8.12</link> - 2020-02-03</title></title>

<para>🛠️ <emphasis role="bold">Maintenance release</emphasis></para>

<para>Classes are now annotated for better static analysis with <link xlink:href="https://psalm.dev/">psalm</link>.</para>

<para>This is a maintenance release: no bug fixes, no new features, no breaking changes.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5657">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.11">0.8.11</link> - 2020-01-23</title></title>

<para>✨ <emphasis role="bold">New feature</emphasis></para>

<para><computeroutput>BigInteger::powerMod()</computeroutput> performs a power-with-modulo operation. Useful for crypto.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5658">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.10">0.8.10</link> - 2020-01-21</title></title>

<para>✨ <emphasis role="bold">New feature</emphasis></para>

<para><computeroutput>BigInteger::mod()</computeroutput> returns the <emphasis role="bold">modulo</emphasis> of two numbers. The <emphasis>modulo</emphasis> differs from the <emphasis>remainder</emphasis> when the signs of the operands are different.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5659">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.9">0.8.9</link> - 2020-01-08</title></title>

<para>⚡️ <emphasis role="bold">Performance improvements</emphasis></para>

<para>A few additional optimizations in <computeroutput>BigInteger</computeroutput> and <computeroutput>BigDecimal</computeroutput> when one of the operands can be returned as is. Thanks to @tomtomsen in #24.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5660">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.8">0.8.8</link> - 2019-04-25</title></title>

<para>🐛 <emphasis role="bold">Bug fixes</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::toBase()</computeroutput> could return an empty string for zero values (BCMath &amp; Native calculators only, GMP calculator unaffected)</para>
</listitem></itemizedlist>
</para>

<para>✨ <emphasis role="bold">New features</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::toArbitraryBase()</computeroutput> converts a number to an arbitrary base, using a custom alphabet</para>
</listitem><listitem>
<para><computeroutput>BigInteger::fromArbitraryBase()</computeroutput> converts a string in an arbitrary base, using a custom alphabet, back to a number</para>
</listitem></itemizedlist>
</para>

<para>These methods can be used as the foundation to convert strings between different bases/alphabets, using BigInteger as an intermediate representation.</para>

<para>💩 <emphasis role="bold">Deprecations</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::parse()</computeroutput> is now deprecated in favour of <computeroutput>fromBase()</computeroutput></para>
</listitem></itemizedlist>
</para>

<para><computeroutput>BigInteger::fromBase()</computeroutput> works the same way as <computeroutput>parse()</computeroutput>, with 2 minor differences:</para>

<para><itemizedlist>
<listitem>
<para>the <computeroutput>$base</computeroutput> parameter is required, it does not default to <computeroutput>10</computeroutput></para>
</listitem><listitem>
<para>it throws a <computeroutput>NumberFormatException</computeroutput> instead of an <computeroutput>InvalidArgumentException</computeroutput> when the number is malformed</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5661">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.7">0.8.7</link> - 2019-04-20</title></title>

<para><emphasis role="bold">Improvements</emphasis></para>

<para><itemizedlist>
<listitem>
<para>Safer conversion from <computeroutput>float</computeroutput> when using custom locales</para>
</listitem><listitem>
<para><emphasis role="bold">Much faster</emphasis> <computeroutput>NativeCalculator</computeroutput> implementation 🚀</para>
</listitem></itemizedlist>
</para>

<para>You can expect <emphasis role="bold">at least a 3x performance improvement</emphasis> for common arithmetic operations when using the library on systems without GMP or BCMath; it gets exponentially faster on multiplications with a high number of digits. This is due to calculations now being performed on whole blocks of digits (the block size depending on the platform, 32-bit or 64-bit) instead of digit-by-digit as before.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5662">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.6">0.8.6</link> - 2019-04-11</title></title>

<para><emphasis role="bold">New method</emphasis></para>

<para><computeroutput>BigNumber::sum()</computeroutput> returns the sum of one or more numbers.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5663">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.5">0.8.5</link> - 2019-02-12</title></title>

<para><emphasis role="bold">Bug fix</emphasis>: <computeroutput>of()</computeroutput> factory methods could fail when passing a <computeroutput>float</computeroutput> in environments using a <computeroutput>LC_NUMERIC</computeroutput> locale with a decimal separator other than &#8216;&#8217;.&apos;` (#20).</para>

<para>Thanks @manowark 👍</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5664">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.4">0.8.4</link> - 2018-12-07</title></title>

<para><emphasis role="bold">New method</emphasis></para>

<para><computeroutput>BigDecimal::sqrt()</computeroutput> calculates the square root of a decimal number, to a given scale.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5665">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.3">0.8.3</link> - 2018-12-06</title></title>

<para><emphasis role="bold">New method</emphasis></para>

<para><computeroutput>BigInteger::sqrt()</computeroutput> calculates the square root of a number (thanks @peter279k).</para>

<para><emphasis role="bold">New exception</emphasis></para>

<para><computeroutput>NegativeNumberException</computeroutput> is thrown when calling <computeroutput>sqrt()</computeroutput> on a negative number.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5666">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.2">0.8.2</link> - 2018-11-08</title></title>

<para><emphasis role="bold">Performance update</emphasis></para>

<para><itemizedlist>
<listitem>
<para>Further improvement of <computeroutput>toInt()</computeroutput> performance</para>
</listitem><listitem>
<para><computeroutput>NativeCalculator</computeroutput> can now perform some multiplications more efficiently</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5667">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.1">0.8.1</link> - 2018-11-07</title></title>

<para>Performance optimization of <computeroutput>toInt()</computeroutput> methods.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5668">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.8.0">0.8.0</link> - 2018-10-13</title></title>

<para><emphasis role="bold">Breaking changes</emphasis></para>

<para>The following deprecated methods have been removed. Use the new method name instead:</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row  class='markdownTableHead'>
<entry>
<para>Method removed   </para>
</entry><entry>
<para>Replacement method    </para>
</entry></row>
</thead><tbody>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>BigDecimal::getIntegral()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>BigDecimal::getIntegralPart()</computeroutput>    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>BigDecimal::getFraction()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>BigDecimal::getFractionalPart()</computeroutput>   </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
</para>

<para><emphasis role="bold">New features</emphasis></para>

<para><computeroutput>BigInteger</computeroutput> has been augmented with 5 new methods for bitwise operations:</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row  class='markdownTableHead'>
<entry>
<para>New method   </para>
</entry><entry>
<para>Description    </para>
</entry></row>
</thead><tbody>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>and()</computeroutput>   </para>
</entry><entry>
<para>performs a bitwise <computeroutput>AND</computeroutput> operation on two numbers    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>or()</computeroutput>   </para>
</entry><entry>
<para>performs a bitwise <computeroutput>OR</computeroutput> operation on two numbers    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>xor()</computeroutput>   </para>
</entry><entry>
<para>performs a bitwise <computeroutput>XOR</computeroutput> operation on two numbers    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>shiftedLeft()</computeroutput>   </para>
</entry><entry>
<para>returns the number shifted left by a number of bits    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>shiftedRight()</computeroutput>   </para>
</entry><entry>
<para>returns the number shifted right by a number of bits   </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>Thanks to @DASPRiD 👍</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5670">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.7.3">0.7.3</link> - 2018-08-20</title></title>

<para><emphasis role="bold">New method:</emphasis> <computeroutput>BigDecimal::hasNonZeroFractionalPart()</computeroutput></para>

<para><emphasis role="bold">Renamed/deprecated methods:</emphasis></para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigDecimal::getIntegral()</computeroutput> has been renamed to <computeroutput>getIntegralPart()</computeroutput> and is now deprecated</para>
</listitem><listitem>
<para><computeroutput>BigDecimal::getFraction()</computeroutput> has been renamed to <computeroutput>getFractionalPart()</computeroutput> and is now deprecated</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5671">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.7.2">0.7.2</link> - 2018-07-21</title></title>

<para><emphasis role="bold">Performance update</emphasis></para>

<para><computeroutput>BigInteger::parse()</computeroutput> and <computeroutput>toBase()</computeroutput> now use GMP&apos;s built-in base conversion features when available.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5672">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.7.1">0.7.1</link> - 2018-03-01</title></title>

<para>This is a maintenance release, no code has been changed.</para>

<para><itemizedlist>
<listitem>
<para>When installed with <computeroutput>--no-dev</computeroutput>, the autoloader does not autoload tests anymore</para>
</listitem><listitem>
<para><link linkend="_namespace_tests">Tests</link> and other files unnecessary for production are excluded from the dist package</para>
</listitem></itemizedlist>
</para>

<para>This will help make installations more compact.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5673">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.7.0">0.7.0</link> - 2017-10-02</title></title>

<para>Methods renamed:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigNumber:sign()</computeroutput> has been renamed to <computeroutput>getSign()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigDecimal::unscaledValue()</computeroutput> has been renamed to <computeroutput>getUnscaledValue()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigDecimal::scale()</computeroutput> has been renamed to <computeroutput>getScale()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigDecimal::integral()</computeroutput> has been renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">getIntegral()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigDecimal::fraction()</computeroutput> has been renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">getFraction()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigRational::numerator()</computeroutput> has been renamed to <computeroutput>getNumerator()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigRational::denominator()</computeroutput> has been renamed to <computeroutput>getDenominator()</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>Classes renamed:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>ArithmeticException</computeroutput> has been renamed to <computeroutput>MathException</computeroutput></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5674">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.6.2">0.6.2</link> - 2017-10-02</title></title>

<para>The base class for all exceptions is now <computeroutput>MathException</computeroutput>. <computeroutput>ArithmeticException</computeroutput> has been deprecated, and will be removed in 0.7.0.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5675">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.6.1">0.6.1</link> - 2017-10-02</title></title>

<para>A number of methods have been renamed:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigNumber:sign()</computeroutput> is deprecated; use <computeroutput>getSign()</computeroutput> instead</para>
</listitem><listitem>
<para><computeroutput>BigDecimal::unscaledValue()</computeroutput> is deprecated; use <computeroutput>getUnscaledValue()</computeroutput> instead</para>
</listitem><listitem>
<para><computeroutput>BigDecimal::scale()</computeroutput> is deprecated; use <computeroutput>getScale()</computeroutput> instead</para>
</listitem><listitem>
<para><computeroutput>BigDecimal::integral()</computeroutput> is deprecated; use <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">getIntegral()</link></computeroutput> instead</para>
</listitem><listitem>
<para><computeroutput>BigDecimal::fraction()</computeroutput> is deprecated; use <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">getFraction()</link></computeroutput> instead</para>
</listitem><listitem>
<para><computeroutput>BigRational::numerator()</computeroutput> is deprecated; use <computeroutput>getNumerator()</computeroutput> instead</para>
</listitem><listitem>
<para><computeroutput>BigRational::denominator()</computeroutput> is deprecated; use <computeroutput>getDenominator()</computeroutput> instead</para>
</listitem></itemizedlist>
</para>

<para>The old methods will be removed in version 0.7.0.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5676">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.6.0">0.6.0</link> - 2017-08-25</title></title>

<para><itemizedlist>
<listitem>
<para>Minimum PHP version is now <link xlink:href="https://gophp71.org/">7.1</link>; for PHP 5.6 and PHP 7.0 support, use version <computeroutput>0.5</computeroutput></para>
</listitem><listitem>
<para>Deprecated method <computeroutput>BigDecimal::withScale()</computeroutput> has been removed; use <computeroutput>toScale()</computeroutput> instead</para>
</listitem><listitem>
<para>Method <computeroutput>BigNumber::toInteger()</computeroutput> has been renamed to <computeroutput>toInt()</computeroutput></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5677">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.5.4">0.5.4</link> - 2016-10-17</title></title>

<para><computeroutput>BigNumber</computeroutput> classes now implement <link xlink:href="http://php.net/manual/en/class.jsonserializable.php">JsonSerializable</link>. The JSON output is always a string.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5678">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.5.3">0.5.3</link> - 2016-03-31</title></title>

<para>This is a bugfix release. Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5679">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.5.2">0.5.2</link> - 2015-08-06</title></title>

<para>The <computeroutput>$scale</computeroutput> parameter of <computeroutput>BigDecimal::dividedBy()</computeroutput> is now optional again.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5680">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.5.1">0.5.1</link> - 2015-07-05</title></title>

<para><emphasis role="bold">New method: <computeroutput>BigNumber::toScale()</computeroutput></emphasis></para>

<para>This allows to convert any <computeroutput>BigNumber</computeroutput> to a <computeroutput>BigDecimal</computeroutput> with a given scale, using rounding if necessary.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5681">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.5.0">0.5.0</link> - 2015-07-04</title></title>

<para><emphasis role="bold">New features</emphasis><itemizedlist>
<listitem>
<para>Common <computeroutput>BigNumber</computeroutput> interface for all classes, with the following methods:<itemizedlist>
<listitem>
<para><computeroutput>sign()</computeroutput> and derived methods (<computeroutput>isZero()</computeroutput>, <computeroutput>isPositive()</computeroutput>, ...)</para>
</listitem><listitem>
<para><computeroutput>compareTo()</computeroutput> and derived methods (<computeroutput>isEqualTo()</computeroutput>, <computeroutput>isGreaterThan()</computeroutput>, ...) that work across different <computeroutput>BigNumber</computeroutput> types</para>
</listitem><listitem>
<para><computeroutput>toBigInteger()</computeroutput>, <computeroutput>toBigDecimal()</computeroutput>, <computeroutput>toBigRational</computeroutput>() conversion methods</para>
</listitem><listitem>
<para><computeroutput>toInteger()</computeroutput> and <computeroutput>toFloat()</computeroutput> conversion methods to native types</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Unified <computeroutput>of()</computeroutput> behaviour: every class now accepts any type of number, provided that it can be safely converted to the current type</para>
</listitem><listitem>
<para>New method: <computeroutput>BigDecimal::exactlyDividedBy()</computeroutput>; this method automatically computes the scale of the result, provided that the division yields a finite number of digits</para>
</listitem><listitem>
<para>New methods: <computeroutput>BigRational::quotient()</computeroutput> and <computeroutput>remainder()</computeroutput></para>
</listitem><listitem>
<para>Fine-grained exceptions: <computeroutput>DivisionByZeroException</computeroutput>, <computeroutput>RoundingNecessaryException</computeroutput>, <computeroutput>NumberFormatException</computeroutput></para>
</listitem><listitem>
<para>Factory methods <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">zero()</link></computeroutput>, <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">one()</link></computeroutput> and <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">ten()</link></computeroutput> available in all classes</para>
</listitem><listitem>
<para>Rounding mode reintroduced in <computeroutput>BigInteger::dividedBy()</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>This release also comes with many performance improvements.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
</para>

<para><emphasis role="bold">Breaking changes</emphasis><itemizedlist>
<listitem>
<para><computeroutput>BigInteger</computeroutput>:<itemizedlist>
<listitem>
<para><computeroutput>getSign()</computeroutput> is renamed to <computeroutput>sign()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>toString()</computeroutput> is renamed to <computeroutput>toBase()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>BigInteger::dividedBy()</computeroutput> now throws an exception by default if the remainder is not zero; use <computeroutput>quotient()</computeroutput> to get the previous behaviour</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>BigDecimal</computeroutput>:<itemizedlist>
<listitem>
<para><computeroutput>getSign()</computeroutput> is renamed to <computeroutput>sign()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>getUnscaledValue()</computeroutput> is renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">unscaledValue()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>getScale()</computeroutput> is renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">scale()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">getIntegral()</link></computeroutput> is renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">integral()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">getFraction()</link></computeroutput> is renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">fraction()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">divideAndRemainder()</link></computeroutput> is renamed to <computeroutput>quotientAndRemainder()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>dividedBy()</computeroutput> now takes a <emphasis role="bold">mandatory</emphasis> <computeroutput>$scale</computeroutput> parameter <emphasis role="bold">before</emphasis> the rounding mode</para>
</listitem><listitem>
<para><computeroutput>toBigInteger()</computeroutput> does not accept a <computeroutput>$roundingMode</computeroutput> parameter any more</para>
</listitem><listitem>
<para><computeroutput>toBigRational()</computeroutput> does not simplify the fraction any more; explicitly add <computeroutput>-&gt;simplified()</computeroutput> to get the previous behaviour</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><computeroutput>BigRational</computeroutput>:<itemizedlist>
<listitem>
<para><computeroutput>getSign()</computeroutput> is renamed to <computeroutput>sign()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>getNumerator()</computeroutput> is renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">numerator()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>getDenominator()</computeroutput> is renamed to <computeroutput><link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">denominator()</link></computeroutput></para>
</listitem><listitem>
<para><computeroutput>of()</computeroutput> is renamed to <computeroutput>nd()</computeroutput>, while <computeroutput>parse()</computeroutput> is renamed to <computeroutput>of()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para>Miscellaneous:<itemizedlist>
<listitem>
<para><computeroutput>ArithmeticException</computeroutput> is moved to an <computeroutput>Exception\</computeroutput> sub-namespace</para>
</listitem><listitem>
<para><computeroutput>of()</computeroutput> factory methods now throw <computeroutput>NumberFormatException</computeroutput> instead of <computeroutput>InvalidArgumentException</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5683">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.4.3">0.4.3</link> - 2016-03-31</title></title>

<para>Backport of two bug fixes from the 0.5 branch:<itemizedlist>
<listitem>
<para><computeroutput>BigInteger::parse()</computeroutput> did not always throw <computeroutput>InvalidArgumentException</computeroutput> as expected</para>
</listitem><listitem>
<para>Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5684">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.4.2">0.4.2</link> - 2015-06-16</title></title>

<para>New method: <computeroutput>BigDecimal::stripTrailingZeros()</computeroutput></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5685">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.4.1">0.4.1</link> - 2015-06-12</title></title>

<para>Introducing a <computeroutput>BigRational</computeroutput> class, to perform calculations on fractions of any size.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5686">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.4.0">0.4.0</link> - 2015-06-12</title></title>

<para>Rounding modes have been removed from <computeroutput>BigInteger</computeroutput>, and are now a concept specific to <computeroutput>BigDecimal</computeroutput>.</para>

<para><computeroutput>BigInteger::dividedBy()</computeroutput> now always returns the quotient of the division.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5687">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.3.5">0.3.5</link> - 2016-03-31</title></title>

<para>Backport of two bug fixes from the 0.5 branch:</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>BigInteger::parse()</computeroutput> did not always throw <computeroutput>InvalidArgumentException</computeroutput> as expected</para>
</listitem><listitem>
<para>Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5688">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.3.4">0.3.4</link> - 2015-06-11</title></title>

<para>New methods:<itemizedlist>
<listitem>
<para><computeroutput>BigInteger::remainder()</computeroutput> returns the remainder of a division only</para>
</listitem><listitem>
<para><computeroutput>BigInteger::gcd()</computeroutput> returns the greatest common divisor of two numbers</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5689">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.3.3">0.3.3</link> - 2015-06-07</title></title>

<para>Fix <computeroutput>toString()</computeroutput> not handling negative numbers.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5690">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.3.2">0.3.2</link> - 2015-06-07</title></title>

<para><computeroutput>BigInteger</computeroutput> and <computeroutput>BigDecimal</computeroutput> now have a <computeroutput>getSign()</computeroutput> method that returns:<itemizedlist>
<listitem>
<para><computeroutput>-1</computeroutput> if the number is negative</para>
</listitem><listitem>
<para><computeroutput>0</computeroutput> if the number is zero</para>
</listitem><listitem>
<para><computeroutput>1</computeroutput> if the number is positive</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5691">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.3.1">0.3.1</link> - 2015-06-05</title></title>

<para>Minor performance improvements</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5692">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.3.0">0.3.0</link> - 2015-06-04</title></title>

<para>The <computeroutput>$roundingMode</computeroutput> and <computeroutput>$scale</computeroutput> parameters have been swapped in <computeroutput>BigDecimal::dividedBy()</computeroutput>.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5693">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.2.2">0.2.2</link> - 2015-06-04</title></title>

<para>Stronger immutability guarantee for <computeroutput>BigInteger</computeroutput> and <computeroutput>BigDecimal</computeroutput>.</para>

<para>So far, it would have been possible to break immutability of these classes by calling the <computeroutput>unserialize()</computeroutput> internal function. This release fixes that.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5694">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.2.1">0.2.1</link> - 2015-06-02</title></title>

<para>Added <computeroutput>BigDecimal::divideAndRemainder()</computeroutput></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5695">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.2.0">0.2.0</link> - 2015-05-22</title></title>

<para><itemizedlist>
<listitem>
<para><computeroutput>min()</computeroutput> and <computeroutput>max()</computeroutput> do not accept an <computeroutput>array</computeroutput> any more, but a variable number of parameters</para>
</listitem><listitem>
<para><emphasis role="bold">minimum PHP version is now 5.6</emphasis></para>
</listitem><listitem>
<para>continuous integration with PHP 7</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5696">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.1.1">0.1.1</link> - 2014-09-01</title></title>

<para><itemizedlist>
<listitem>
<para>Added <computeroutput>BigInteger::power()</computeroutput></para>
</listitem><listitem>
<para>Added HHVM support</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2brick_2math_2_c_h_a_n_g_e_l_o_g_1autotoc_md5697">
<title><title><link xlink:href="https://github.com/brick/math/releases/tag/0.1.0">0.1.0</link> - 2014-08-31</title></title>

<para>First beta release. </para>
</section>
</section>
