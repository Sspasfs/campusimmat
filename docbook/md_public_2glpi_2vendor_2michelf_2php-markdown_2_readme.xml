<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme" xml:lang="fr">
<title>PHP Markdown</title>
<indexterm><primary>PHP Markdown</primary></indexterm>

<para>PHP Markdown Lib 1.9.1 - 23 Nov 2021</para>

<para>by Michel Fortin <?linebreak?> <link xlink:href="https://michelf.ca/">https://michelf.ca/</link></para>

<para>based on Markdown by John Gruber <?linebreak?> <link xlink:href="https://daringfireball.net/">https://daringfireball.net/</link></para>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6773">
<title><title>Introduction</title></title>

<para>This is a library package that includes the PHP Markdown parser and its sibling PHP Markdown Extra with additional features.</para>

<para>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).</para>

<para>&quot;Markdown&quot; is actually two things: a plain text markup syntax, and a software tool, originally written in Perl, that converts the plain text markup to HTML. PHP Markdown is a port to PHP of the original Markdown program by John Gruber.</para>

<para><itemizedlist>
<listitem>
<para><link xlink:href="https://daringfireball.net/projects/markdown/">Full documentation of the Markdown syntax</link> <?linebreak?> — Daring Fireball (John Gruber)</para>
</listitem><listitem>
<para><link xlink:href="https://michelf.ca/projects/php-markdown/extra/">Markdown Extra syntax additions</link> <?linebreak?> — Michel Fortin</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6774">
<title><title>Requirement</title></title>

<para>This library package requires PHP 5.3 or later.</para>

<para>Note: The older plugin/library hybrid package for PHP Markdown and PHP Markdown Extra is no longer maintained but will work with PHP 4.0.5 and later.</para>

<para>Before PHP 5.3.7, pcre.backtrack_limit defaults to 100 000, which is too small in many situations. You might need to set it to higher values. Later PHP releases defaults to 1 000 000, which is usually fine.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6775">
<title><title>Usage</title></title>

<para>To use this library with <link linkend="_namespace_composer">Composer</link>, first install it with: <literallayout><computeroutput>$ composer require michelf/php-markdown
</computeroutput></literallayout> Then include <link linkend="_namespace_composer">Composer</link>&apos;s generated <link linkend="_autoload_8php">vendor/autoload.php</link> to [enable autoloading]: <literallayout><computeroutput>require &apos;vendor/autoload.php&apos;;
</computeroutput></literallayout> Without <link linkend="_namespace_composer">Composer</link>, for autoloading to work, your project needs an autoloader compatible with PSR-4 or PSR-0. See the included <link linkend="__readme_8php">Readme.php</link> file for a minimal autoloader setup. (If you cannot use autoloading, see below.)</para>

<para>With class autoloading in place: <literallayout><computeroutput>use Michelf\Markdown;
$my_html = Markdown::defaultTransform($my_text);
</computeroutput></literallayout> Markdown Extra syntax is also available the same way: <literallayout><computeroutput>use Michelf\MarkdownExtra;
$my_html = MarkdownExtra::defaultTransform($my_text);
</computeroutput></literallayout> If you wish to use PHP Markdown with another text filter function built to parse HTML, you should filter the text <emphasis>after</emphasis> the <computeroutput>transform</computeroutput> function call. This is an example with [PHP SmartyPants]: <literallayout><computeroutput>use Michelf\Markdown, Michelf\SmartyPants;
$my_html = Markdown::defaultTransform($my_text);
$my_html = SmartyPants::defaultTransform($my_html);
</computeroutput></literallayout> All these examples are using the static <computeroutput>defaultTransform</computeroutput> static function found inside the parser class. If you want to customize the parser configuration, you can also instantiate it directly and change some configuration variables: <literallayout><computeroutput>use Michelf\MarkdownExtra;
$parser = new MarkdownExtra;
$parser-&gt;fn_id_prefix = &quot;post22-&quot;;
$my_html = $parser-&gt;transform($my_text);
</computeroutput></literallayout> To learn more, see the full list of <link xlink:href="https://michelf.ca/projects/php-markdown/configuration/">configuration variables</link>.</para>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6776">
<title><title>Usage without an autoloader</title></title>

<para>If you cannot use class autoloading, you can still use <computeroutput>include</computeroutput> or <computeroutput>require</computeroutput> to access the parser. To load the <computeroutput><link linkend="_namespace_michelf">Michelf</link>\Markdown</computeroutput> parser, do it this way: <literallayout><computeroutput>require_once &apos;Michelf/Markdown.inc.php&apos;;
</computeroutput></literallayout> Or, if you need the <computeroutput><link linkend="_namespace_michelf">Michelf</link>\MarkdownExtra</computeroutput> parser: <literallayout><computeroutput>require_once &apos;Michelf/MarkdownExtra.inc.php&apos;;
</computeroutput></literallayout> While the plain <computeroutput>.php</computeroutput> files depend on autoloading to work correctly, using the <computeroutput>.inc.php</computeroutput> files instead will eagerly load the dependencies that would be loaded on demand if you were using autoloading.</para>
</section>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6777">
<title><title>Public API and Versioning Policy</title></title>

<para>Version numbers are of the form <emphasis>major</emphasis>.*minor*.*patch*.</para>

<para>The public API of PHP Markdown consist of the two parser classes <computeroutput>Markdown</computeroutput> and <computeroutput>MarkdownExtra</computeroutput>, their constructors, the <computeroutput>transform</computeroutput> and <computeroutput>defaultTransform</computeroutput> functions and their configuration variables. The public API is stable for a given major version number. It might get additions when the minor version number increments.</para>

<para><emphasis role="bold">Protected members are not considered public API.</emphasis> This is unconventional and deserves an explanation. Incrementing the major version number every time the underlying implementation of something changes is going to give nonessential version numbers for the vast majority of people who just use the parser. Protected members are meant to create parser subclasses that behave in different ways. Very few people create parser subclasses. I don&apos;t want to discourage it by making everything private, but at the same time I can&apos;t guarantee any stable hook between versions if you use protected members.</para>

<para><emphasis role="bold">Syntax changes</emphasis> will increment the minor number for new features, and the patch number for small corrections. A <emphasis>new feature</emphasis> is something that needs a change in the syntax documentation. Note that since PHP Markdown Lib includes two parsers, a syntax change for either of them will increment the minor number. Also note that there is nothing perfectly backward-compatible with the Markdown syntax: all inputs are always valid, so new features always replace something that was previously legal, although generally nonsensical to do.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6778">
<title><title>Bugs</title></title>

<para>To file bug reports please send email to: <link xlink:href="mailto:michel.fortin@michelf.ca">michel.fortin@michelf.ca</link></para>

<para>Please include with your report: (1) the example input; (2) the output you expected; (3) the output PHP Markdown actually produced.</para>

<para>If you have a problem where Markdown gives you an empty result, first check that the backtrack limit is not too low by running <computeroutput>php --info | grep pcre</computeroutput>. See Installation and Requirement above for details.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6779">
<title><title>Development and Testing</title></title>

<para>Pull requests for fixing bugs are welcome. Proposed new features are going to be meticulously reviewed &#8211; taking into account backward compatibility, potential side effects, and future extensibility &#8211; before deciding on acceptance or rejection.</para>

<para>If you make a pull request that includes changes to the parser please add tests for what is being changed to the <computeroutput>test/</computeroutput> directory. This can be as simple as adding a <computeroutput>.text</computeroutput> (input) file with a corresponding <computeroutput>.xhtml</computeroutput> (output) file to proper category under <computeroutput>./test/resources/</computeroutput>.</para>

<para>Traditionally tests were in a separate repository, <link xlink:href="https://github.com/michelf/mdtest">MDTest</link> but they are now located here, alongside the source code.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6780">
<title><title>Donations</title></title>

<para>If you wish to make a donation that will help me devote more time to PHP Markdown, please visit <link xlink:href="https://michelf.ca/donate/#!Thanks%20for%20PHP%20Markdown">michelf.ca/donate</link>.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6781">
<title><title>Version History</title></title>

<para>PHP Markdown Lib 1.9.1 (23 Nov 2021)</para>

<para><itemizedlist>
<listitem>
<para>Now treating <computeroutput>&lt;details&gt;</computeroutput> and <computeroutput>&lt;summary&gt;</computeroutput> as block level so they don&apos;t get wrapped in <computeroutput>&lt;p&gt;</computeroutput>. (Thanks to Thomas Hochstein for the fix.)</para>
</listitem><listitem>
<para>Fix for unintended blank title attribute when adding supplementary attributes to a link in Markdown Extra. (Thanks to Richie Black for the fix.)</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.9.0 (1 Dec 2019)</para>

<para><itemizedlist>
<listitem>
<para>Added <computeroutput>fn_backlink_label</computeroutput> configuration variable to put some text in the <computeroutput>aria-label</computeroutput> attribute. (Thanks to Sunny Walker for the implementation.)</para>
</listitem><listitem>
<para>Occurances of &quot;`^^`&quot; in <computeroutput>fn_backlink_html</computeroutput>, <computeroutput>fn_backlink_class</computeroutput>, <computeroutput>fn_backlink_title</computeroutput>, and <computeroutput>fn_backlink_label</computeroutput> will be replaced by the corresponding footnote number in the HTML output. Occurances of &quot;`%%`&quot; will be replaced by a number for the reference (footnotes can have multiple references). (Thanks to Sunny Walker for the implementation.)</para>
</listitem><listitem>
<para>Added configuration variable <computeroutput>omit_footnotes</computeroutput>. When <computeroutput>true</computeroutput> footnotes are not appended at the end of the generated HTML and the <computeroutput>footnotes_assembled</computeroutput> variable will contain the HTML for the footnote list, allowing footnotes to be moved somewhere else on the page. (Thanks to James K. for the implementation.)</para>

<para>Note: when placing the content of <computeroutput>footnotes_assembled</computeroutput> on the page, consider adding the attribute <computeroutput>role=&quot;doc-endnotes&quot;</computeroutput> to the <computeroutput>&lt;div&gt;</computeroutput> or <computeroutput>&lt;section&gt;</computeroutput> that will enclose the list of footnotes so they are reachable to accessibility tools the same way they would be with the default HTML output.</para>
</listitem><listitem>
<para>Fixed deprecation warnings from PHP about usage of curly braces to access characters in text strings. (Thanks to Remi Collet and Frans-Willem Post.)</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.8.0 (14 Jan 2018)</para>

<para><itemizedlist>
<listitem>
<para>Autoloading with <link linkend="_namespace_composer">Composer</link> now uses PSR-4.</para>
</listitem><listitem>
<para>HTML output for Markdown Extra footnotes now include <computeroutput>role</computeroutput> attributes with values from <link xlink:href="https://www.w3.org/TR/dpub-aria/">WAI-ARIA</link> to make them more accessible. (Thanks to Tobias Bengfort)</para>
</listitem><listitem>
<para>In Markdown Extra, added the <computeroutput>hashtag_protection</computeroutput> configuration variable. When set to <computeroutput>true</computeroutput> it prevents ATX-style headers with no space after the initial hash from being interpreted as headers. This way your precious hashtags are preserved. (Thanks to Jaussoin Timothée for the implementation.)</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.7.0 (29 Oct 2016)</para>

<para><itemizedlist>
<listitem>
<para>Added a <computeroutput>hard_wrap</computeroutput> configuration variable to make all newline characters in the text become <computeroutput>&lt;br&gt;</computeroutput> tags in the HTML output. By default, according to the standard Markdown syntax these newlines are ignored unless they a preceded by two spaces. Thanks to Jonathan Cohlmeyer for the implementation.</para>
</listitem><listitem>
<para>Improved the parsing of list items to fix problematic cases that came to light with the addition of <computeroutput>hard_wrap</computeroutput>. This should have no effect on the output except span-level list items that ended with two spaces (and thus ended with a line break).</para>
</listitem><listitem>
<para>Added a <computeroutput>code_span_content_func</computeroutput> configuration variable which takes a function that will convert the content of the code span to HTML. This can be useful to implement syntax highlighting. Although contrary to its code block equivalent, there is no syntax for specifying a language. Credits to styxit for the implementation.</para>
</listitem><listitem>
<para>Fixed a Markdown Extra issue where two-space-at-end-of-line hard breaks wouldn&apos;t work inside of HTML block elements such as <computeroutput>&lt;p markdown=&quot;1&quot;&gt;</computeroutput> where the element expects only span-level content.</para>
</listitem><listitem>
<para>In the parser code, switched to PHPDoc comment format. Thanks to Robbie Averill for the help.</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.6.0 (23 Dec 2015)</para>

<para>Note: this version was incorrectly released as 1.5.1 on Dec 22, a number that contradicted the versioning policy.</para>

<para><itemizedlist>
<listitem>
<para>For fenced code blocks in Markdown Extra, can now set a class name for the code block&apos;s language before the special attribute block. Previously, this class name was only allowed in the absence of the special attribute block.</para>
</listitem><listitem>
<para>Added a <computeroutput>code_block_content_func</computeroutput> configuration variable which takes a function that will convert the content of the code block to HTML. This is most useful for syntax highlighting. For fenced code blocks in Markdown Extra, the function has access to the language class name (the one outside of the special attribute block). Credits to Mario Konrad for providing the implementation.</para>
</listitem><listitem>
<para>The curled arrow character for the backlink in footnotes is now followed by a Unicode variant selector to prevent it from being displayed in emoji form on iOS.</para>

<para>Note that in older browsers the variant selector is often interpreted as a separate character, making it visible after the arrow. So there is now a also a <computeroutput>fn_backlink_html</computeroutput> configuration variable that can be used to set the link text to something else. Credits to Dana for providing the implementation.</para>
</listitem><listitem>
<para>Fixed an issue in MarkdownExtra where long header lines followed by a special attribute block would hit the backtrack limit an cause an empty string to be returned.</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.5.0 (1 Mar 2015)</para>

<para><itemizedlist>
<listitem>
<para>Added the ability start ordered lists with a number different from 1 and and have that reflected in the HTML output. This can be enabled with the <computeroutput>enhanced_ordered_lists</computeroutput> configuration variable for the Markdown parser; it is enabled by default for Markdown Extra. Credits to Matt Gorle for providing the implementation.</para>
</listitem><listitem>
<para>Added the ability to insert custom HTML attributes with simple values everywhere an extra attribute block is allowed (links, images, headers). The value must be unquoted, cannot contains spaces and is limited to alphanumeric ASCII characters. Credits to Peter Droogmans for providing the implementation.</para>
</listitem><listitem>
<para>Added a <computeroutput>header_id_func</computeroutput> configuration variable which takes a function that can generate an <computeroutput>id</computeroutput> attribute value from the header text. Credits to Evert Pot for providing the implementation.</para>
</listitem><listitem>
<para>Added a <computeroutput>url_filter_func</computeroutput> configuration variable which takes a function that can rewrite any link or image URL to something different.</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.4.1 (4 May 2014)</para>

<para><itemizedlist>
<listitem>
<para>The HTML block parser will now treat <computeroutput>&lt;figure&gt;</computeroutput> as a block-level element (as it should) and no longer wrap it in <computeroutput>&lt;p&gt;</computeroutput> or parse it&apos;s content with the as Markdown syntax (although with Extra you can use <computeroutput>markdown=&quot;1&quot;</computeroutput> if you wish to use the Markdown syntax inside it).</para>
</listitem><listitem>
<para>The content of <computeroutput>&lt;style&gt;</computeroutput> elements will now be left alone, its content won&apos;t be interpreted as Markdown.</para>
</listitem><listitem>
<para>Corrected an bug where some inline links with spaces in them would not work even when surounded with angle brackets: <literallayout><computeroutput>[link](&lt;s p a c e s&gt;)
</computeroutput></literallayout></para>
</listitem><listitem>
<para>Fixed an issue where email addresses with quotes in them would not always have the quotes escaped in the link attribute, causing broken links (and invalid HTML).</para>
</listitem><listitem>
<para>Fixed the case were a link definition following a footnote definition would be swallowed by the footnote unless it was separated by a blank line.</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.4.0 (29 Nov 2013)</para>

<para><itemizedlist>
<listitem>
<para>Added support for the <computeroutput>tel:</computeroutput> URL scheme in automatic links. <literallayout><computeroutput>&lt;tel:+1-111-111-1111&gt;
</computeroutput></literallayout> It gets converted to this (note the <computeroutput>tel:</computeroutput> prefix becomes invisible): <literallayout><computeroutput>&lt;a href=&quot;tel:+1-111-111-1111&quot;&gt;+1-111-111-1111&lt;/a&gt;
</computeroutput></literallayout></para>
</listitem><listitem>
<para>Added backtick fenced code blocks to MarkdownExtra, originally from Github-Flavored Markdown.</para>
</listitem><listitem>
<para>Added an interface called MarkdownInterface implemented by both the Markdown and MarkdownExtra parsers. You can use the interface if you want to create a mockup parser object for unit testing.</para>
</listitem><listitem>
<para>For those of you who cannot use class autoloading, you can now include <computeroutput><link linkend="__markdown_8inc_8php">Michelf/Markdown.inc.php</link></computeroutput> or <computeroutput><link linkend="__markdown_extra_8inc_8php">Michelf/MarkdownExtra.inc.php</link></computeroutput> (note the <computeroutput>.inc.php</computeroutput> extension) to automatically include other files required by the parser.</para>
</listitem></itemizedlist>
</para>

<para>PHP Markdown Lib 1.3 (11 Apr 2013)</para>

<para>This is the first release of PHP Markdown Lib. This package requires PHP version 5.3 or later and is designed to work with PSR-0 autoloading and, optionally with <link linkend="_namespace_composer">Composer</link>. Here is a list of the changes since PHP Markdown Extra 1.2.6:</para>

<para><itemizedlist>
<listitem>
<para><link linkend="_class_plugin">Plugin</link> interface for WordPress and other systems is no longer present in the Lib package. The classic package is still available if you need it: <link xlink:href="https://michelf.ca/projects/php-markdown/classic/">https://michelf.ca/projects/php-markdown/classic/</link></para>
</listitem><listitem>
<para>Added <computeroutput>public</computeroutput> and <computeroutput>protected</computeroutput> protection attributes, plus a section about what is &quot;public API&quot; and what isn&apos;t in the Readme file.</para>
</listitem><listitem>
<para>Changed HTML output for footnotes: now instead of adding <computeroutput>rel</computeroutput> and <computeroutput>rev</computeroutput> attributes, footnotes links have the class name <computeroutput>footnote-ref</computeroutput> and backlinks <computeroutput>footnote-backref</computeroutput>.</para>
</listitem><listitem>
<para>Fixed some regular expressions to make PCRE not shout warnings about POSIX collation classes (dependent on your version of PCRE).</para>
</listitem><listitem>
<para>Added optional class and id attributes to images and links using the same syntax as for headers: <literallayout><computeroutput>[link](url){#id .class}
![img](url){#id .class}
</computeroutput></literallayout> It work too for reference-style links and images. In this case you need to put those attributes at the reference definition: <literallayout><computeroutput>[link][linkref] or [linkref]
![img][linkref]

[linkref]: url &quot;optional title&quot; {#id .class}
</computeroutput></literallayout></para>
</listitem><listitem>
<para>Fixed a PHP notice message triggered when some table column separator markers are missing on the separator line below column headers.</para>
</listitem><listitem>
<para>Fixed a small mistake that could cause the parser to retain an invalid state related to parsing links across multiple runs. This was never observed (that I know of), but it&apos;s still worth fixing.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2michelf_2php-markdown_2_readme_1autotoc_md6782">
<title><title>Copyright and License</title></title>

<para>PHP Markdown Lib Copyright (c) 2004-2021 Michel Fortin <link xlink:href="https://michelf.ca/">https://michelf.ca/</link> <?linebreak?> All rights reserved.</para>

<para>Based on Markdown <?linebreak?> Copyright (c) 2003-2005 John Gruber <?linebreak?> <link xlink:href="https://daringfireball.net/">https://daringfireball.net/</link> <?linebreak?> All rights reserved.</para>

<para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</para>

<para><itemizedlist>
<listitem>
<para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para>
</listitem><listitem>
<para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para>
</listitem><listitem>
<para>Neither the name &quot;Markdown&quot; nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</para>
</listitem></itemizedlist>
</para>

<para>This software is provided by the copyright holders and contributors &quot;as
is&quot; and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed. In no event shall the copyright owner or contributors be liable for any direct, indirect, incidental, special, exemplary, or consequential damages (including, but not limited to, procurement of substitute goods or services; loss of use, data, or profits; or business interruption) however caused and on any theory of liability, whether in contract, strict liability, or tort (including negligence or otherwise) arising in any way out of the use of this software, even if advised of the possibility of such damage. </para>
</section>
</section>
