<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_public_2glpi_2vendor_2phplang_2scope-exit_2_r_e_a_d_m_e" xml:lang="fr">
<title>ScopeExit</title>
<indexterm><primary>ScopeExit</primary></indexterm>

<para><anchor xml:id="_md_public_2glpi_2vendor_2phplang_2scope-exit_2_r_e_a_d_m_e_1autotoc_md6892"/> This simple class provides an implementation of C++&apos;s <computeroutput>SCOPE_EXIT</computeroutput>, or GoLang&apos;s <computeroutput>defer</computeroutput>.</para>

<para>To use, assign an instance of this object to a local variable. When that variable falls out of scope (or is explicitly <computeroutput>unset</computeroutput>, the callback passed to the constructor will be invoked. This is useful, for example, to aid cleanup at the end of a funciton.</para>

<para><literallayout><computeroutput>function&#32;f(&amp;$x)&#32;{
&#32;&#32;$x&#32;=&#32;1;
&#32;&#32;$_&#32;=&#32;new&#32;\PhpLang\ScopeExit(function()&#32;use&#32;(&amp;$x)&#32;{&#32;$x&#32;=&#32;2;&#32;});
&#32;&#32;//&#32;$x&#32;is&#32;still&#32;1&#32;at&#32;this&#32;point.
&#32;&#32;return&#32;42;
&#32;&#32;//&#32;After&#32;the&#32;return,&#32;the&#32;local&#32;scope&#32;is&#32;cleaned&#32;up,&#32;the&#32;closure&#32;is&#32;invoked,&#32;and&#32;it&apos;s&#32;set&#32;to&#32;2
}

f($a);
var_dump($a);&#32;//&#32;int(2)
</computeroutput></literallayout> </para>
</section>
