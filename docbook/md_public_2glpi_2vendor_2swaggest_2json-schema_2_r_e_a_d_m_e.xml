<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e" xml:lang="fr">
<title>Swaggest JSON-schema implementation for PHP</title>
<indexterm><primary>Swaggest JSON-schema implementation for PHP</primary></indexterm>

<para><anchor xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7329"/> <link xlink:href="https://travis-ci.org/swaggest/php-json-schema"></link> <link xlink:href="https://codecov.io/gh/swaggest/php-json-schema"></link> <link xlink:href="https://wakatime.com/badge/github/swaggest/php-json-schema"></link>  </para>

<para>High definition PHP structures with JSON-schema based validation.</para>

<para>Supported schemas:</para>

<para><itemizedlist>
<listitem>
<para><link xlink:href="http://json-schema.org/specification-links.html#draft-7">JSON Schema Draft 7</link></para>
</listitem><listitem>
<para><link xlink:href="http://json-schema.org/specification-links.html#draft-6">JSON Schema Draft 6</link></para>
</listitem><listitem>
<para><link xlink:href="http://json-schema.org/specification-links.html#draft-4">JSON Schema Draft 4</link></para>
</listitem></itemizedlist>
</para>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7330">
<title><title>Installation</title></title>

<para><literallayout><computeroutput>composer&#32;require&#32;swaggest/json-schema
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7331">
<title><title>Usage</title></title>

<para>Structure definition can be done either with <computeroutput>json-schema</computeroutput> or with <computeroutput>PHP</computeroutput> class extending <computeroutput><link linkend="_namespace_swaggest">Swaggest</link>\JsonSchema\Structure\ClassStructure</computeroutput></para>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7332">
<title><title>Validating JSON data against given schema</title></title>

<para>Define your json-schema</para>

<para><literallayout><computeroutput>$schemaJson&#32;=&#32;&lt;&lt;&lt;&apos;JSON&apos;
{
&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;object&quot;,
&#32;&#32;&#32;&#32;&quot;properties&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;id&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;integer&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;name&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;string&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;orders&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;array&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;items&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;$ref&quot;:&#32;&quot;#/definitions/order&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&quot;required&quot;:[&quot;id&quot;],
&#32;&#32;&#32;&#32;&quot;definitions&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;order&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;object&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;properties&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;id&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;integer&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;price&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;number&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;updated&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&quot;:&#32;&quot;string&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;format&quot;:&#32;&quot;date-time&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;required&quot;:[&quot;id&quot;]
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
}
JSON;
</computeroutput></literallayout></para>

<para>Load it</para>

<para><literallayout><computeroutput>use&#32;Swaggest\JsonSchema\Schema;
$schema&#32;=&#32;Schema::import(json_decode($schemaJson));
</computeroutput></literallayout></para>

<para>Validate data</para>

<para><literallayout><computeroutput>$schema-&gt;in(json_decode(&lt;&lt;&lt;&apos;JSON&apos;
{
&#32;&#32;&#32;&#32;&quot;id&quot;:&#32;1,
&#32;&#32;&#32;&#32;&quot;name&quot;:&quot;John&#32;Doe&quot;,
&#32;&#32;&#32;&#32;&quot;orders&quot;:[
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;id&quot;:1
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;price&quot;:1.0
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;]
}
JSON
));&#32;//&#32;Exception:&#32;Required&#32;property&#32;missing:&#32;id&#32;at&#32;#-&gt;properties:orders-&gt;items[1]-&gt;#/definitions/order
</computeroutput></literallayout></para>

<para>You can also call <computeroutput>Schema::import</computeroutput> on string <computeroutput>uri</computeroutput> to schema json data.</para>

<para><literallayout><computeroutput>$schema&#32;=&#32;Schema::import(&apos;http://localhost:1234/my_schema.json&apos;);
</computeroutput></literallayout></para>

<para>Or with boolean argument.</para>

<para><literallayout><computeroutput>$schema&#32;=&#32;Schema::import(true);&#32;//&#32;permissive&#32;schema,&#32;always&#32;validates
$schema&#32;=&#32;Schema::import(false);&#32;//&#32;restrictive&#32;schema,&#32;always&#32;invalidates
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7333">
<title><title>Understanding error cause</title></title>

<para>With complex schemas it may be hard to find out what&apos;s wrong with your data. Exception message can look like:</para>

<para><literallayout><computeroutput>No&#32;valid&#32;results&#32;for&#32;oneOf&#32;{
&#32;0:&#32;Enum&#32;failed,&#32;enum:&#32;[&quot;a&quot;],&#32;data:&#32;&quot;f&quot;&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo-&gt;oneOf[0]
&#32;1:&#32;Enum&#32;failed,&#32;enum:&#32;[&quot;b&quot;],&#32;data:&#32;&quot;f&quot;&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo-&gt;oneOf[1]
&#32;2:&#32;No&#32;valid&#32;results&#32;for&#32;anyOf&#32;{
&#32;&#32;&#32;0:&#32;Enum&#32;failed,&#32;enum:&#32;[&quot;c&quot;],&#32;data:&#32;&quot;f&quot;&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo-&gt;oneOf[2]-&gt;$ref[#/cde]-&gt;anyOf[0]
&#32;&#32;&#32;1:&#32;Enum&#32;failed,&#32;enum:&#32;[&quot;d&quot;],&#32;data:&#32;&quot;f&quot;&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo-&gt;oneOf[2]-&gt;$ref[#/cde]-&gt;anyOf[1]
&#32;&#32;&#32;2:&#32;Enum&#32;failed,&#32;enum:&#32;[&quot;e&quot;],&#32;data:&#32;&quot;f&quot;&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo-&gt;oneOf[2]-&gt;$ref[#/cde]-&gt;anyOf[2]
&#32;}&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo-&gt;oneOf[2]-&gt;$ref[#/cde]
}&#32;at&#32;#-&gt;properties:root-&gt;patternProperties[^[a-zA-Z0-9_]+$]:zoo
</computeroutput></literallayout></para>

<para>For ambiguous schemas defined with <computeroutput>oneOf</computeroutput>/<computeroutput>anyOf</computeroutput> message is indented multi-line string.</para>

<para>Processing path is a combination of schema and data pointers. You can use <computeroutput>InvalidValue-&gt;getSchemaPointer()</computeroutput> and <computeroutput>InvalidValue-&gt;getDataPointer()</computeroutput> to extract schema/data pointer.</para>

<para>You can receive <computeroutput>Schema</computeroutput> instance that failed validation with <computeroutput>InvalidValue-&gt;getFailedSubSchema</computeroutput>.</para>

<para>You can build error tree using <computeroutput>InvalidValue-&gt;inspect()</computeroutput>.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7334">
<title><title>PHP structured classes with validation</title></title>

<para><literallayout><computeroutput>/**
&#32;*&#32;@property&#32;int&#32;$quantity&#32;PHPDoc&#32;defined&#32;dynamic&#32;properties&#32;will&#32;be&#32;validated&#32;on&#32;every&#32;set
&#32;*/
class&#32;User&#32;extends&#32;ClassStructure
{
&#32;&#32;&#32;&#32;/*&#32;Native&#32;(public)&#32;properties&#32;will&#32;be&#32;validated&#32;only&#32;on&#32;import&#32;and&#32;export&#32;of&#32;structure&#32;data&#32;*/

&#32;&#32;&#32;&#32;/**&#32;@var&#32;int&#32;*/
&#32;&#32;&#32;&#32;public&#32;$id;
&#32;&#32;&#32;&#32;public&#32;$name;
&#32;&#32;&#32;&#32;/**&#32;@var&#32;Order[]&#32;*/
&#32;&#32;&#32;&#32;public&#32;$orders;

&#32;&#32;&#32;&#32;/**&#32;@var&#32;UserInfo&#32;*/
&#32;&#32;&#32;&#32;public&#32;$info;

&#32;&#32;&#32;&#32;/**
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Properties|static&#32;$properties
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Schema&#32;$ownerSchema
&#32;&#32;&#32;&#32;&#32;*/
&#32;&#32;&#32;&#32;public&#32;static&#32;function&#32;setUpProperties($properties,&#32;Schema&#32;$ownerSchema)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;You&#32;can&#32;add&#32;custom&#32;meta&#32;to&#32;your&#32;schema
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$dbTable&#32;=&#32;new&#32;DbTable;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$dbTable-&gt;tableName&#32;=&#32;&apos;users&apos;;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;addMeta($dbTable);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Setup&#32;property&#32;schemas
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;id&#32;=&#32;Schema::integer();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;id-&gt;addMeta(new&#32;DbId($dbTable));&#32;//&#32;You&#32;can&#32;add&#32;meta&#32;to&#32;property.

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;name&#32;=&#32;Schema::string();

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;You&#32;can&#32;embed&#32;structures&#32;to&#32;main&#32;level&#32;with&#32;nested&#32;schemas
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;info&#32;=&#32;UserInfo::schema()-&gt;nested();

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;You&#32;can&#32;set&#32;default&#32;value&#32;for&#32;property
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$defaultOptions&#32;=&#32;new&#32;UserOptions();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$defaultOptions-&gt;autoLogin&#32;=&#32;true;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$defaultOptions-&gt;groupName&#32;=&#32;&apos;guest&apos;;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;UserOptions::schema()&#32;is&#32;safe&#32;to&#32;change&#32;as&#32;it&#32;is&#32;protected&#32;with&#32;lazy&#32;cloning
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;options&#32;=&#32;UserOptions::schema()-&gt;setDefault(UserOptions::export($defaultOptions));

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Dynamic&#32;(phpdoc-defined)&#32;properties&#32;can&#32;be&#32;used&#32;as&#32;well
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;quantity&#32;=&#32;Schema::integer();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;quantity-&gt;minimum&#32;=&#32;0;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Property&#32;can&#32;be&#32;any&#32;complex&#32;structure
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;orders&#32;=&#32;Schema::create();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;orders-&gt;items&#32;=&#32;Order::schema();

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;required&#32;=&#32;array(self::names()-&gt;id);
&#32;&#32;&#32;&#32;}
}

class&#32;UserInfo&#32;extends&#32;ClassStructure&#32;{
&#32;&#32;&#32;&#32;public&#32;$firstName;
&#32;&#32;&#32;&#32;public&#32;$lastName;
&#32;&#32;&#32;&#32;public&#32;$birthDay;

&#32;&#32;&#32;&#32;/**
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Properties|static&#32;$properties
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Schema&#32;$ownerSchema
&#32;&#32;&#32;&#32;&#32;*/
&#32;&#32;&#32;&#32;public&#32;static&#32;function&#32;setUpProperties($properties,&#32;Schema&#32;$ownerSchema)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;firstName&#32;=&#32;Schema::string();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;lastName&#32;=&#32;Schema::string();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;birthDay&#32;=&#32;Schema::string();
&#32;&#32;&#32;&#32;}
}

class&#32;UserOptions&#32;extends&#32;ClassStructure
{
&#32;&#32;&#32;&#32;public&#32;$autoLogin;
&#32;&#32;&#32;&#32;public&#32;$groupName;

&#32;&#32;&#32;&#32;/**
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Properties|static&#32;$properties
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Schema&#32;$ownerSchema
&#32;&#32;&#32;&#32;&#32;*/
&#32;&#32;&#32;&#32;public&#32;static&#32;function&#32;setUpProperties($properties,&#32;Schema&#32;$ownerSchema)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;autoLogin&#32;=&#32;Schema::boolean();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;groupName&#32;=&#32;Schema::string();
&#32;&#32;&#32;&#32;}
}

class&#32;Order&#32;implements&#32;ClassStructureContract
{
&#32;&#32;&#32;&#32;use&#32;ClassStructureTrait;&#32;//&#32;You&#32;can&#32;use&#32;trait&#32;if&#32;you&#32;can&apos;t/don&apos;t&#32;want&#32;to&#32;extend&#32;ClassStructure

&#32;&#32;&#32;&#32;const&#32;FANCY_MAPPING&#32;=&#32;&apos;fAnCy&apos;;&#32;//&#32;You&#32;can&#32;create&#32;additional&#32;mapping&#32;namespace

&#32;&#32;&#32;&#32;public&#32;$id;
&#32;&#32;&#32;&#32;public&#32;$userId;
&#32;&#32;&#32;&#32;public&#32;$dateTime;
&#32;&#32;&#32;&#32;public&#32;$price;

&#32;&#32;&#32;&#32;/**
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Properties|static&#32;$properties
&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;Schema&#32;$ownerSchema
&#32;&#32;&#32;&#32;&#32;*/
&#32;&#32;&#32;&#32;public&#32;static&#32;function&#32;setUpProperties($properties,&#32;Schema&#32;$ownerSchema)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Add&#32;some&#32;meta&#32;data&#32;to&#32;your&#32;schema
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$dbMeta&#32;=&#32;new&#32;DbTable();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$dbMeta-&gt;tableName&#32;=&#32;&apos;orders&apos;;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;addMeta($dbMeta);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Define&#32;properties
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;id&#32;=&#32;Schema::integer();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;userId&#32;=&#32;User::properties()-&gt;id;&#32;//&#32;referencing&#32;property&#32;of&#32;another&#32;schema&#32;keeps&#32;meta
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;dateTime&#32;=&#32;Schema::string();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;dateTime-&gt;format&#32;=&#32;Format::DATE_TIME;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$properties-&gt;price&#32;=&#32;Schema::number();

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;setFromRef(&apos;#/definitions/order&apos;);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Define&#32;default&#32;mapping&#32;if&#32;any.
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;addPropertyMapping(&apos;date_time&apos;,&#32;Order::names()-&gt;dateTime);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Use&#32;mapped&#32;name&#32;references&#32;after&#32;the&#32;default&#32;mapping&#32;was&#32;configured.
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$names&#32;=&#32;self::names($ownerSchema-&gt;properties);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;required&#32;=&#32;array(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$names-&gt;id,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$names-&gt;dateTime,&#32;//&#32;&quot;date_time&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$names-&gt;price&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Define&#32;additional&#32;mapping
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;addPropertyMapping(&apos;DaTe_TiMe&apos;,&#32;Order::names()-&gt;dateTime,&#32;self::FANCY_MAPPING);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;addPropertyMapping(&apos;Id&apos;,&#32;Order::names()-&gt;id,&#32;self::FANCY_MAPPING);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$ownerSchema-&gt;addPropertyMapping(&apos;PrIcE&apos;,&#32;Order::names()-&gt;price,&#32;self::FANCY_MAPPING);
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>Validation of dynamic properties is performed on set, this can help to find source of invalid data at cost of some performance drop</para>

<para><literallayout><computeroutput>$user&#32;=&#32;new&#32;User();
$user-&gt;quantity&#32;=&#32;-1;&#32;//&#32;Exception:&#32;Value&#32;more&#32;than&#32;0&#32;expected,&#32;-1&#32;received
</computeroutput></literallayout></para>

<para>Validation of native properties is performed only on import/export</para>

<para><literallayout><computeroutput>$user&#32;=&#32;new&#32;User();
$user-&gt;quantity&#32;=&#32;10;
User::export($user);&#32;//&#32;Exception:&#32;Required&#32;property&#32;missing:&#32;id
</computeroutput></literallayout></para>

<para>Error messages provide a path to invalid data</para>

<para><literallayout><computeroutput>$user&#32;=&#32;new&#32;User();
$user-&gt;id&#32;=&#32;1;
$user-&gt;name&#32;=&#32;&apos;John&#32;Doe&apos;;

$order&#32;=&#32;new&#32;Order();
$order-&gt;dateTime&#32;=&#32;(new&#32;\DateTime())-&gt;format(DATE_RFC3339);
$user-&gt;orders[]&#32;=&#32;$order;

User::export($user);&#32;//&#32;Exception:&#32;Required&#32;property&#32;missing:&#32;id&#32;at&#32;#-&gt;properties:orders-&gt;items[0]
</computeroutput></literallayout></para>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7335">
<title><title>Nested structures</title></title>

<para>Nested structures allow you to make composition: flatten several objects in one and separate back.</para>

<para><literallayout><computeroutput>$user&#32;=&#32;new&#32;User();
$user-&gt;id&#32;=&#32;1;

$info&#32;=&#32;new&#32;UserInfo();
$info-&gt;firstName&#32;=&#32;&apos;John&apos;;
$info-&gt;lastName&#32;=&#32;&apos;Doe&apos;;
$info-&gt;birthDay&#32;=&#32;&apos;1970-01-01&apos;;
$user-&gt;info&#32;=&#32;$info;

$json&#32;=&#32;&lt;&lt;&lt;JSON
{
&#32;&#32;&#32;&#32;&quot;id&quot;:&#32;1,
&#32;&#32;&#32;&#32;&quot;firstName&quot;:&#32;&quot;John&quot;,
&#32;&#32;&#32;&#32;&quot;lastName&quot;:&#32;&quot;Doe&quot;,
&#32;&#32;&#32;&#32;&quot;birthDay&quot;:&#32;&quot;1970-01-01&quot;
}
JSON;
$exported&#32;=&#32;User::export($user);
$this-&gt;assertSame($json,&#32;json_encode($exported,&#32;JSON_PRETTY_PRINT));

$imported&#32;=&#32;User::import(json_decode($json));
$this-&gt;assertSame(&apos;John&apos;,&#32;$imported-&gt;info-&gt;firstName);
$this-&gt;assertSame(&apos;Doe&apos;,&#32;$imported-&gt;info-&gt;lastName);
</computeroutput></literallayout></para>

<para>You can also use <computeroutput>\<link linkend="_namespace_swaggest">Swaggest</link>\JsonSchema\Structure\Composition</computeroutput> to dynamically create schema compositions. This can be helpful to deal with results of database query on joined data.</para>

<para><literallayout><computeroutput>$schema&#32;=&#32;new&#32;Composition(UserInfo::schema(),&#32;Order::schema());
$json&#32;=&#32;&lt;&lt;&lt;JSON
{
&#32;&#32;&#32;&#32;&quot;id&quot;:&#32;1,
&#32;&#32;&#32;&#32;&quot;firstName&quot;:&#32;&quot;John&quot;,
&#32;&#32;&#32;&#32;&quot;lastName&quot;:&#32;&quot;Doe&quot;,
&#32;&#32;&#32;&#32;&quot;price&quot;:&#32;2.66
}
JSON;
$object&#32;=&#32;$schema-&gt;import(json_decode($json));

//&#32;Get&#32;particular&#32;object&#32;with&#32;`pick`&#32;accessor
$info&#32;=&#32;UserInfo::pick($object);
$order&#32;=&#32;Order::pick($object);

//&#32;Data&#32;is&#32;imported&#32;objects&#32;of&#32;according&#32;classes
$this-&gt;assertTrue($order&#32;instanceof&#32;Order);
$this-&gt;assertTrue($info&#32;instanceof&#32;UserInfo);

$this-&gt;assertSame(1,&#32;$order-&gt;id);
$this-&gt;assertSame(&apos;John&apos;,&#32;$info-&gt;firstName);
$this-&gt;assertSame(&apos;Doe&apos;,&#32;$info-&gt;lastName);
$this-&gt;assertSame(2.66,&#32;$order-&gt;price);
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7336">
<title><title>Keys mapping</title></title>

<para>If property names of PHP objects should be different from raw data you can call <computeroutput>-&gt;addPropertyMapping</computeroutput> on owner schema.</para>

<para><literallayout><computeroutput>//&#32;Define&#32;default&#32;mapping&#32;if&#32;any
$ownerSchema-&gt;addPropertyMapping(&apos;date_time&apos;,&#32;Order::names()-&gt;dateTime);

//&#32;Define&#32;additional&#32;mapping
$ownerSchema-&gt;addPropertyMapping(&apos;DaTe_TiMe&apos;,&#32;Order::names()-&gt;dateTime,&#32;self::FANCY_MAPPING);
$ownerSchema-&gt;addPropertyMapping(&apos;Id&apos;,&#32;Order::names()-&gt;id,&#32;self::FANCY_MAPPING);
$ownerSchema-&gt;addPropertyMapping(&apos;PrIcE&apos;,&#32;Order::names()-&gt;price,&#32;self::FANCY_MAPPING);
</computeroutput></literallayout></para>

<para>It will affect data mapping:</para>

<para><literallayout><computeroutput>$order&#32;=&#32;new&#32;Order();
$order-&gt;id&#32;=&#32;1;
$order-&gt;dateTime&#32;=&#32;&apos;2015-10-28T07:28:00Z&apos;;
$order-&gt;price&#32;=&#32;2.2;
$exported&#32;=&#32;Order::export($order);
$json&#32;=&#32;&lt;&lt;&lt;JSON
{
&#32;&#32;&#32;&#32;&quot;id&quot;:&#32;1,
&#32;&#32;&#32;&#32;&quot;date_time&quot;:&#32;&quot;2015-10-28T07:28:00Z&quot;,
&#32;&#32;&#32;&#32;&quot;price&quot;:&#32;2.2
}
JSON;
$this-&gt;assertSame($json,&#32;json_encode($exported,&#32;JSON_PRETTY_PRINT));

$imported&#32;=&#32;Order::import(json_decode($json));
$this-&gt;assertSame(&apos;2015-10-28T07:28:00Z&apos;,&#32;$imported-&gt;dateTime);
</computeroutput></literallayout></para>

<para>You can have multiple mapping namespaces, controlling with <computeroutput>mapping</computeroutput> property of <computeroutput>Context</computeroutput></para>

<para><literallayout><computeroutput>$options&#32;=&#32;new&#32;Context();
$options-&gt;mapping&#32;=&#32;Order::FANCY_MAPPING;

$exported&#32;=&#32;Order::export($order,&#32;$options);
$json&#32;=&#32;&lt;&lt;&lt;JSON
{
&#32;&#32;&#32;&#32;&quot;Id&quot;:&#32;1,
&#32;&#32;&#32;&#32;&quot;DaTe_TiMe&quot;:&#32;&quot;2015-10-28T07:28:00Z&quot;,
&#32;&#32;&#32;&#32;&quot;PrIcE&quot;:&#32;2.2
}
JSON;
$this-&gt;assertSame($json,&#32;json_encode($exported,&#32;JSON_PRETTY_PRINT));

$imported&#32;=&#32;Order::import(json_decode($json),&#32;$options);
$this-&gt;assertSame(&apos;2015-10-28T07:28:00Z&apos;,&#32;$imported-&gt;dateTime);
</computeroutput></literallayout></para>

<para>You can create your own pre-processor implementing <computeroutput><link linkend="_namespace_swaggest">Swaggest</link>\JsonSchema\DataPreProcessor</computeroutput>.</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7337">
<title><title>Meta</title></title>

<para><computeroutput>Meta</computeroutput> is a way to complement <computeroutput>Schema</computeroutput> with your own data. You can keep and retrieve it.</para>

<para>You can store it.</para>

<para><literallayout><computeroutput>$dbMeta&#32;=&#32;new&#32;DbTable();
$dbMeta-&gt;tableName&#32;=&#32;&apos;orders&apos;;
$ownerSchema-&gt;addMeta($dbMeta);
</computeroutput></literallayout></para>

<para>And get back.</para>

<para><literallayout><computeroutput>//&#32;Retrieving&#32;meta
$dbTable&#32;=&#32;DbTable::get(Order::schema());
$this-&gt;assertSame(&apos;orders&apos;,&#32;$dbTable-&gt;tableName);
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7338">
<title><title>Mapping without validation</title></title>

<para>If you want to tolerate invalid data or improve mapping performance you can specify <computeroutput>skipValidation</computeroutput> flag in processing <computeroutput>Context</computeroutput></para>

<para><literallayout><computeroutput>$schema&#32;=&#32;Schema::object();
$schema-&gt;setProperty(&apos;one&apos;,&#32;Schema::integer());
$schema-&gt;properties-&gt;one-&gt;minimum&#32;=&#32;5;

$options&#32;=&#32;new&#32;Context();
$options-&gt;skipValidation&#32;=&#32;true;

$res&#32;=&#32;$schema-&gt;in(json_decode(&apos;{&quot;one&quot;:4}&apos;),&#32;$options);
$this-&gt;assertSame(4,&#32;$res-&gt;one);
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7339">
<title><title>Overriding mapping classes</title></title>

<para>If you want to map data to a different class you can register mapping at top level of your importer structure.</para>

<para><literallayout><computeroutput>class&#32;CustomSwaggerSchema&#32;extends&#32;SwaggerSchema
{
&#32;&#32;&#32;&#32;public&#32;static&#32;function&#32;import($data,&#32;Context&#32;$options&#32;=&#32;null)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;($options&#32;===&#32;null)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$options&#32;=&#32;new&#32;Context();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;$options-&gt;objectItemClassMapping[Schema::className()]&#32;=&#32;CustomSchema::className();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;parent::import($data,&#32;$options);
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>Or specify it in processing context</para>

<para><literallayout><computeroutput>$context&#32;=&#32;new&#32;Context();
$context-&gt;objectItemClassMapping[Schema::className()]&#32;=&#32;CustomSchema::className();
$schema&#32;=&#32;SwaggerSchema::schema()-&gt;in(json_decode(
&#32;&#32;&#32;&#32;file_get_contents(__DIR__&#32;.&#32;&apos;/../../../../spec/petstore-swagger.json&apos;)
),&#32;$context);
$this-&gt;assertInstanceOf(CustomSchema::className(),&#32;$schema-&gt;definitions[&apos;User&apos;]);
</computeroutput></literallayout></para>
</section>
</section>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7340">
<title><title>Code quality and test coverage</title></title>

<para>Some code quality best practices are deliberately violated here ( see <link xlink:href="https://scrutinizer-ci.com/g/swaggest/php-json-schema/?branch=master"></link> ) to allow best performance at maintenance cost.</para>

<para>Those violations are secured by comprehensive test coverage:</para>

<para><itemizedlist>
<listitem>
<para>draft-04, draft-06, draft-07 of <link xlink:href="https://github.com/json-schema-org/JSON-Schema-Test-Suite">JSON-Schema-Test-Suite</link></para>
</listitem><listitem>
<para>test cases (excluding <computeroutput>$data</computeroutput> and few tests) of <link xlink:href="https://github.com/epoberezkin/ajv/tree/master/spec">epoberezkin/ajv</link> (a mature js implementation)</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_public_2glpi_2vendor_2swaggest_2json-schema_2_r_e_a_d_m_e_1autotoc_md7341">
<title><title>Contributing</title></title>

<para>Issues and pull requests are welcome!</para>

<para><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/0"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/1"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/2"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/3"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/4"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/5"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/6"></link><link xlink:href="https://sourcerer.io/fame/vearutop/swaggest/php-json-schema/links/7"></link></para>

<para>Development supported by <link xlink:href="https://www.jetbrains.com/community/opensource/#support">JetBrains</link>. </para>
</section>
</section>
