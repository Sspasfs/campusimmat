<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace_guzzle_http_1_1_promise" xml:lang="fr">
<title>Référence de l&apos;espace de nommage GuzzleHttp\Promise</title>
<indexterm><primary>GuzzleHttp\Promise</primary></indexterm>
<simplesect>
    <title>Structures de données    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_aggregate_exception">AggregateException</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_cancellation_exception">CancellationException</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_coroutine">Coroutine</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_create">Create</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_each">Each</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_each_promise">EachPromise</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_fulfilled_promise">FulfilledPromise</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_is">Is</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_promise">Promise</link></para>
</listitem>
            <listitem><para>interface <link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link></para>
</listitem>
            <listitem><para>interface <link linkend="_interface_guzzle_http_1_1_promise_1_1_promisor_interface">PromisorInterface</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_rejected_promise">RejectedPromise</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_rejection_exception">RejectionException</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_task_queue">TaskQueue</link></para>
</listitem>
            <listitem><para>interface <link linkend="_interface_guzzle_http_1_1_promise_1_1_task_queue_interface">TaskQueueInterface</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_guzzle_http_1_1_promise_1_1_utils">Utils</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Fonctions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1adfcdd835e18507bf1c578315dad29687">queue</link> (<link linkend="_interface_guzzle_http_1_1_promise_1_1_task_queue_interface">TaskQueueInterface</link> $assign=null)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1ad46008bb92f80f8605bcc4a9808b8c62">task</link> (<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $task)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1acec96f3423bb6467860113baebfcdfa3">promise_for</link> ($value)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1aaa1ffe25870021ebe787164cbee3a412">rejection_for</link> ($reason)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a838adb1579710b857a9017f5af5f0817">exception_for</link> ($reason)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a7326bfcec28a4b3df218ce6321d2708e">iter_for</link> ($value)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a967789715e206f57296087e306a62b97">inspect</link> (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a88b7b702ef0e5e498f54e4bc8077e8a6">inspect_all</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a872182194a884a4ed11f905680270140">unwrap</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1ae83348ce57763721fb9bb26e5622e19e">all</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">recursive</link>=false)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1ad3792e8574abd363ccd943fd7b5b1b91">some</link> ($count, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a95f540bdb4100ba711164977015a9318">any</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a99ec308cf174db544d9592e8be9200ea">settle</link> ($<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1ab5ea9d310cb6032645d86a80e9bba380">each</link> ( $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">iterable</link>, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onFulfilled=null, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onRejected=null)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1aa84b8bba47c9ece5957c4c59300d8b81">each_limit</link> ( $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">iterable</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">concurrency</link>, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onFulfilled=null, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onRejected=null)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a81304856138677baf245a22f25f00319">each_limit_all</link> ( $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">iterable</link>, $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">concurrency</link>, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onFulfilled=null)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a551deb2d87622785b6ec5fe3d9cd0002">is_fulfilled</link> (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a2138725d281fe7ab7dbf31e767f6cb5a">is_rejected</link> (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a04368d3933a531ae551f6d9f9b381d50">is_settled</link> (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</para>
</listitem>
            <listitem><para><link linkend="_namespace_guzzle_http_1_1_promise_1a9041f9b817eacc3161d832bb78496d7a">coroutine</link> (<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">generatorFn</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Documentation des fonctions</title>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1ae83348ce57763721fb9bb26e5622e19e"/><section>
    <title>all()</title>
<indexterm><primary>all</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>all</secondary></indexterm>
<para><computeroutput>all ( $promises,  $recursive = <computeroutput>false</computeroutput>
)</computeroutput></para>
<para>Given an array of promises, return a promise that is fulfilled when all the items in the array are fulfilled.</para>

<para>The promise&apos;s fulfillment value is an array with fulfillment values at respective positions to the original array. If any promise in the array rejects, the returned promise is rejected with the rejection reason.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$promises</entry><entry>
<para>Promises or values. </para>
</entry>
                            </row>
                            <row>
<entry>bool</entry><entry>$recursive</entry><entry>
<para>If true, resolves new promises that might have been added to the stack during its own resolution.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000049">Obsolète</link> 
<para>all will be removed in guzzlehttp/promises:2.0. Use Utils::all instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_ae83348ce57763721fb9bb26e5622e19e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a95f540bdb4100ba711164977015a9318"/><section>
    <title>any()</title>
<indexterm><primary>any</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>any</secondary></indexterm>
<para><computeroutput>any ( $promises)</computeroutput></para>
<para>Like some(), with 1 as count. However, if the promise fulfills, the fulfillment value is not an array of 1 but the value directly.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$promises</entry><entry>
<para>Promises or values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000051">Obsolète</link> 
<para>any will be removed in guzzlehttp/promises:2.0. Use Utils::any instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a95f540bdb4100ba711164977015a9318_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a9041f9b817eacc3161d832bb78496d7a"/><section>
    <title>coroutine()</title>
<indexterm><primary>coroutine</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>coroutine</secondary></indexterm>
<para><computeroutput>coroutine (<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $generatorFn)</computeroutput></para>
<para>Create a new coroutine.</para>

<para><formalpara><title>Voir également</title>

<para>Coroutine</para>
</formalpara>
<formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000059">Obsolète</link> 
<para>coroutine will be removed in guzzlehttp/promises:2.0. Use Coroutine::of instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a9041f9b817eacc3161d832bb78496d7a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1ab5ea9d310cb6032645d86a80e9bba380"/><section>
    <title>each()</title>
<indexterm><primary>each</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>each</secondary></indexterm>
<para><computeroutput>each ( $iterable, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onFulfilled = <computeroutput>null</computeroutput>
, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onRejected = <computeroutput>null</computeroutput>
)</computeroutput></para>
<para>Given an iterator that yields promises or values, returns a promise that is fulfilled with a null value when the iterator has been consumed or the aggregate promise has been fulfilled or rejected.</para>

<para>$onFulfilled is a function that accepts the fulfilled value, iterator index, and the aggregate promise. The callback can invoke any necessary side effects and choose to resolve or reject the aggregate if needed.</para>

<para>$onRejected is a function that accepts the rejection reason, iterator index, and the aggregate promise. The callback can invoke any necessary side effects and choose to resolve or reject the aggregate if needed.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$iterable</entry><entry>
<para>Iterator or array to iterate over. </para>
</entry>
                            </row>
                            <row>
<entry>callable</entry><entry>$onFulfilled</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>callable</entry><entry>$onRejected</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000053">Obsolète</link> 
<para>each will be removed in guzzlehttp/promises:2.0. Use Each::of instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_ab5ea9d310cb6032645d86a80e9bba380_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1aa84b8bba47c9ece5957c4c59300d8b81"/><section>
    <title>each_limit()</title>
<indexterm><primary>each_limit</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>each_limit</secondary></indexterm>
<para><computeroutput>each_limit ( $iterable,  $concurrency, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onFulfilled = <computeroutput>null</computeroutput>
, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onRejected = <computeroutput>null</computeroutput>
)</computeroutput></para>
<para>Like each, but only allows a certain number of outstanding promises at any given time.</para>

<para>$concurrency may be an integer or a function that accepts the number of pending promises and returns a numeric concurrency limit value to allow for dynamic a concurrency size.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$iterable</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>int | callable</entry><entry>$concurrency</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>callable</entry><entry>$onFulfilled</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>callable</entry><entry>$onRejected</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000054">Obsolète</link> 
<para>each_limit will be removed in guzzlehttp/promises:2.0. Use Each::ofLimit instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_aa84b8bba47c9ece5957c4c59300d8b81_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_aa84b8bba47c9ece5957c4c59300d8b81_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a81304856138677baf245a22f25f00319"/><section>
    <title>each_limit_all()</title>
<indexterm><primary>each_limit_all</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>each_limit_all</secondary></indexterm>
<para><computeroutput>each_limit_all ( $iterable,  $concurrency, <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $onFulfilled = <computeroutput>null</computeroutput>
)</computeroutput></para>
<para>Like each_limit, but ensures that no promise in the given $iterable argument is rejected. If any promise is rejected, then the aggregate promise is rejected with the encountered rejection.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$iterable</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>int | callable</entry><entry>$concurrency</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>callable</entry><entry>$onFulfilled</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000055">Obsolète</link> 
<para>each_limit_all will be removed in guzzlehttp/promises:2.0. Use Each::ofLimitAll instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a81304856138677baf245a22f25f00319_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a838adb1579710b857a9017f5af5f0817"/><section>
    <title>exception_for()</title>
<indexterm><primary>exception_for</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>exception_for</secondary></indexterm>
<para><computeroutput>exception_for ( $reason)</computeroutput></para>
<para>Create an exception for a rejected promise value.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$reason</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>\Exception|\Throwable</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000044">Obsolète</link> 
<para>exception_for will be removed in guzzlehttp/promises:2.0. Use Create::exceptionFor instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a838adb1579710b857a9017f5af5f0817_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a967789715e206f57296087e306a62b97"/><section>
    <title>inspect()</title>
<indexterm><primary>inspect</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>inspect</secondary></indexterm>
<para><computeroutput>inspect (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</computeroutput></para>
<para>Synchronously waits on a promise to resolve and returns an inspection state array.</para>

<para>Returns a state associative array containing a &quot;state&quot; key mapping to a valid promise state. If the state of the promise is &quot;fulfilled&quot;, the array will contain a &quot;value&quot; key mapping to the fulfilled value of the promise. If the promise is rejected, the array will contain a &quot;reason&quot; key mapping to the rejection reason of the promise.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PromiseInterface</entry><entry>$promise</entry><entry>
<para>Promise or value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>array</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000046">Obsolète</link> 
<para>inspect will be removed in guzzlehttp/promises:2.0. Use Utils::inspect instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a967789715e206f57296087e306a62b97_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a88b7b702ef0e5e498f54e4bc8077e8a6"/><section>
    <title>inspect_all()</title>
<indexterm><primary>inspect_all</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>inspect_all</secondary></indexterm>
<para><computeroutput>inspect_all ( $promises)</computeroutput></para>
<para>Waits on all of the provided promises, but does not unwrap rejected promises as thrown exception.</para>

<para>Returns an array of inspection state arrays.</para>

<para><formalpara><title>Voir également</title>

<para>inspect <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">for</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">the</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">inspection</link> state array format.</para>
</formalpara>

                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PromiseInterface[]</entry><entry>$promises</entry><entry>
<para>Traversable of promises to wait upon.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>array</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000047">Obsolète</link> 
<para>inspect will be removed in guzzlehttp/promises:2.0. Use Utils::inspectAll instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a88b7b702ef0e5e498f54e4bc8077e8a6_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a551deb2d87622785b6ec5fe3d9cd0002"/><section>
    <title>is_fulfilled()</title>
<indexterm><primary>is_fulfilled</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>is_fulfilled</secondary></indexterm>
<para><computeroutput>is_fulfilled (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</computeroutput></para>
<para>Returns true if a promise is fulfilled.</para>

<para><formalpara><title>Renvoie</title>

<para>bool</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000056">Obsolète</link> 
<para>is_fulfilled will be removed in guzzlehttp/promises:2.0. Use Is::fulfilled instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a551deb2d87622785b6ec5fe3d9cd0002_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a2138725d281fe7ab7dbf31e767f6cb5a"/><section>
    <title>is_rejected()</title>
<indexterm><primary>is_rejected</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>is_rejected</secondary></indexterm>
<para><computeroutput>is_rejected (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</computeroutput></para>
<para>Returns true if a promise is rejected.</para>

<para><formalpara><title>Renvoie</title>

<para>bool</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000057">Obsolète</link> 
<para>is_rejected will be removed in guzzlehttp/promises:2.0. Use Is::rejected instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a2138725d281fe7ab7dbf31e767f6cb5a_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a04368d3933a531ae551f6d9f9b381d50"/><section>
    <title>is_settled()</title>
<indexterm><primary>is_settled</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>is_settled</secondary></indexterm>
<para><computeroutput>is_settled (<link linkend="_interface_guzzle_http_1_1_promise_1_1_promise_interface">PromiseInterface</link> $promise)</computeroutput></para>
<para>Returns true if a promise is fulfilled or rejected.</para>

<para><formalpara><title>Renvoie</title>

<para>bool</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000058">Obsolète</link> 
<para>is_settled will be removed in guzzlehttp/promises:2.0. Use Is::settled instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a04368d3933a531ae551f6d9f9b381d50_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a7326bfcec28a4b3df218ce6321d2708e"/><section>
    <title>iter_for()</title>
<indexterm><primary>iter_for</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>iter_for</secondary></indexterm>
<para><computeroutput>iter_for ( $value)</computeroutput></para>
<para>Returns an iterator for the given value.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$value</entry><entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>\Iterator</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000045">Obsolète</link> 
<para>iter_for will be removed in guzzlehttp/promises:2.0. Use Create::iterFor instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a7326bfcec28a4b3df218ce6321d2708e_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1acec96f3423bb6467860113baebfcdfa3"/><section>
    <title>promise_for()</title>
<indexterm><primary>promise_for</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>promise_for</secondary></indexterm>
<para><computeroutput>promise_for ( $value)</computeroutput></para>
<para>Creates a promise for a value if the value is not a promise.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$value</entry><entry>
<para>Promise or value.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000042">Obsolète</link> 
<para>promise_for will be removed in guzzlehttp/promises:2.0. Use Create::promiseFor instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_acec96f3423bb6467860113baebfcdfa3_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1adfcdd835e18507bf1c578315dad29687"/><section>
    <title>queue()</title>
<indexterm><primary>queue</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>queue</secondary></indexterm>
<para><computeroutput>queue (<link linkend="_interface_guzzle_http_1_1_promise_1_1_task_queue_interface">TaskQueueInterface</link> $assign = <computeroutput>null</computeroutput>
)</computeroutput></para>
<para>Get the global task queue used for promise resolution.</para>

<para>This task queue MUST be run in an event loop in order for promises to be settled asynchronously. It will be automatically run when synchronously waiting on a promise.</para>

<para><computeroutput> while ($eventLoop-&gt;isRunning()) { <link linkend="_namespace_guzzle_http">GuzzleHttp</link>\Promise\queue()-&gt;run(); } </computeroutput></para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>TaskQueueInterface</entry><entry>$assign</entry><entry>
<para>Optionally specify a new queue instance.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>TaskQueueInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000040">Obsolète</link> 
<para>queue will be removed in guzzlehttp/promises:2.0. Use Utils::queue instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_adfcdd835e18507bf1c578315dad29687_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Voici le graphe des appelants de cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_adfcdd835e18507bf1c578315dad29687_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1aaa1ffe25870021ebe787164cbee3a412"/><section>
    <title>rejection_for()</title>
<indexterm><primary>rejection_for</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>rejection_for</secondary></indexterm>
<para><computeroutput>rejection_for ( $reason)</computeroutput></para>
<para>Creates a rejected promise for a reason if the reason is not a promise. If the provided reason is a promise, then it is returned as-is.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$reason</entry><entry>
<para>Promise or reason.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000043">Obsolète</link> 
<para>rejection_for will be removed in guzzlehttp/promises:2.0. Use Create::rejectionFor instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_aaa1ffe25870021ebe787164cbee3a412_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a99ec308cf174db544d9592e8be9200ea"/><section>
    <title>settle()</title>
<indexterm><primary>settle</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>settle</secondary></indexterm>
<para><computeroutput>settle ( $promises)</computeroutput></para>
<para>Returns a promise that is fulfilled when all of the provided promises have been fulfilled or rejected.</para>

<para>The returned promise is fulfilled with an array of inspection state arrays.</para>

<para><formalpara><title>Voir également</title>

<para>inspect <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">for</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">the</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">inspection</link> state array format.</para>
</formalpara>

                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mixed</entry><entry>$promises</entry><entry>
<para>Promises or values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000052">Obsolète</link> 
<para>settle will be removed in guzzlehttp/promises:2.0. Use Utils::settle instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a99ec308cf174db544d9592e8be9200ea_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1ad3792e8574abd363ccd943fd7b5b1b91"/><section>
    <title>some()</title>
<indexterm><primary>some</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>some</secondary></indexterm>
<para><computeroutput>some ( $count,  $promises)</computeroutput></para>
<para>Initiate a competitive race between multiple promises or values (values will become immediately fulfilled promises).</para>

<para>When count amount of promises have been fulfilled, the returned promise is fulfilled with an array that contains the fulfillment values of the winners in order of resolution.</para>

<para>This promise is rejected with a {<formalpara><title>Voir également</title>

<para>AggregateException} <link linkend="_dropdown_location_8php_1a52332c22f84432520971794825a5a8e7">if</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">the</link> number of fulfilled <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">promises</link> is <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">less</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">than</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">the</link> <link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">desired</link> $count.</para>
</formalpara>

                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>$count</entry><entry>
<para>Total number of promises. </para>
</entry>
                            </row>
                            <row>
<entry>mixed</entry><entry>$promises</entry><entry>
<para>Promises or values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000050">Obsolète</link> 
<para>some will be removed in guzzlehttp/promises:2.0. Use Utils::some instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_ad3792e8574abd363ccd943fd7b5b1b91_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1ad46008bb92f80f8605bcc4a9808b8c62"/><section>
    <title>task()</title>
<indexterm><primary>task</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>task</secondary></indexterm>
<para><computeroutput>task (<link linkend="_report_8contract_8php_1a77b973d137fb33212e018b042df6e3e7">callable</link> $task)</computeroutput></para>
<para>Adds a function to run in the task queue when it is next <computeroutput>run()</computeroutput> and returns a promise that is fulfilled or rejected with the result.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>callable</entry><entry>$task</entry><entry>
<para>Task function to run.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>PromiseInterface</para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000041">Obsolète</link> 
<para>task will be removed in guzzlehttp/promises:2.0. Use Utils::task instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_ad46008bb92f80f8605bcc4a9808b8c62_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace_guzzle_http_1_1_promise_1a872182194a884a4ed11f905680270140"/><section>
    <title>unwrap()</title>
<indexterm><primary>unwrap</primary><secondary>GuzzleHttp\Promise</secondary></indexterm>
<indexterm><primary>GuzzleHttp\Promise</primary><secondary>unwrap</secondary></indexterm>
<para><computeroutput>unwrap ( $promises)</computeroutput></para>
<para>Waits on all of the provided promises and returns the fulfilled values.</para>

<para>Returns an array that contains the value of each promise (in the same order the promises were provided). An exception is thrown if any of the promises are rejected.</para>

<para>
                <formalpara>
                    <title>
Paramètres</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>iterable&lt;PromiseInterface&gt;</entry><entry>
<para>$promises Iterable of PromiseInterface objects to wait on.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Renvoie</title>

<para>array</para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Exception on error 
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry></entry>
<entry></entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Throwable on error in PHP &gt;=7</para>

<para><para><link linkend="_deprecated_1_deprecated000048">Obsolète</link> 
<para>unwrap will be removed in guzzlehttp/promises:2.0. Use Utils::unwrap instead. </para>
</para></para>
Voici le graphe d&apos;appel pour cette fonction :<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace_guzzle_http_1_1_promise_a872182194a884a4ed11f905680270140_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
